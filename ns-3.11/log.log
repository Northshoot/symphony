Waf: Entering directory `/home/lauril/dev/symphony/ns-3.11/build'
[595/913] cxx: scratch/wifi-simple-adhoc.cc -> build/debug/scratch/wifi-simple-adhoc_5.o
[912/913] cxx_link: build/debug/scratch/wifi-simple-adhoc_5.o -> build/debug/scratch/wifi-simple-adhoc
Waf: Leaving directory `/home/lauril/dev/symphony/ns-3.11/build'
'build' finished successfully (1.107s)
Channel:Channel()
ChannelList:ChannelListPriv()
construct tid=ns3::ChannelListPriv, params=1
try to construct "ns3::ChannelListPriv::ChannelList"
construct "ns3::ChannelListPriv::ChannelList" from initial value.
construct tid=ns3::Object, params=0
Simulator:ScheduleDestroy(1)
construct tid=ns3::YansWifiChannel, params=2
try to construct "ns3::YansWifiChannel::PropagationLossModel"
construct "ns3::YansWifiChannel::PropagationLossModel" from initial value.
try to construct "ns3::YansWifiChannel::PropagationDelayModel"
construct "ns3::YansWifiChannel::PropagationDelayModel" from initial value.
construct tid=ns3::WifiChannel, params=0
construct tid=ns3::Channel, params=1
try to construct "ns3::Channel::Id"
construct tid=ns3::Object, params=0
construct tid=ns3::FixedRssLossModel, params=1
try to construct "ns3::FixedRssLossModel::Rss"
construct "ns3::FixedRssLossModel::Rss"
construct tid=ns3::PropagationLossModel, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::ConstantSpeedPropagationDelayModel, params=1
try to construct "ns3::ConstantSpeedPropagationDelayModel::Speed"
construct "ns3::ConstantSpeedPropagationDelayModel::Speed" from initial value.
construct tid=ns3::PropagationDelayModel, params=0
construct tid=ns3::Object, params=0
WifiNetDevice:WifiNetDevice()
construct tid=ns3::WifiNetDevice, params=5
try to construct "ns3::WifiNetDevice::Mtu"
construct "ns3::WifiNetDevice::Mtu" from initial value.
try to construct "ns3::WifiNetDevice::Channel"
construct "ns3::WifiNetDevice::Channel" from initial value.
try to construct "ns3::WifiNetDevice::Phy"
construct "ns3::WifiNetDevice::Phy" from initial value.
try to construct "ns3::WifiNetDevice::Mac"
construct "ns3::WifiNetDevice::Mac" from initial value.
try to construct "ns3::WifiNetDevice::RemoteStationManager"
construct "ns3::WifiNetDevice::RemoteStationManager" from initial value.
construct tid=ns3::NetDevice, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::ConstantRateWifiManager, params=2
try to construct "ns3::ConstantRateWifiManager::DataMode"
construct "ns3::ConstantRateWifiManager::DataMode"
try to construct "ns3::ConstantRateWifiManager::ControlMode"
construct "ns3::ConstantRateWifiManager::ControlMode"
construct tid=ns3::WifiRemoteStationManager, params=6
try to construct "ns3::WifiRemoteStationManager::IsLowLatency"
construct "ns3::WifiRemoteStationManager::IsLowLatency" from initial value.
try to construct "ns3::WifiRemoteStationManager::MaxSsrc"
construct "ns3::WifiRemoteStationManager::MaxSsrc" from initial value.
try to construct "ns3::WifiRemoteStationManager::MaxSlrc"
construct "ns3::WifiRemoteStationManager::MaxSlrc" from initial value.
try to construct "ns3::WifiRemoteStationManager::RtsCtsThreshold"
construct "ns3::WifiRemoteStationManager::RtsCtsThreshold" from global
try to construct "ns3::WifiRemoteStationManager::FragmentationThreshold"
construct "ns3::WifiRemoteStationManager::FragmentationThreshold" from global
try to construct "ns3::WifiRemoteStationManager::NonUnicastMode"
construct "ns3::WifiRemoteStationManager::NonUnicastMode" from global
construct tid=ns3::Object, params=0
RegularWifiMac:RegularWifiMac(0x8626a0)
MacRxMiddle:MacRxMiddle()
MacRxMiddle:SetForwardCallback()
[mac=00:00:00:00:00:00] MacLow:MacLow(0x862890)
construct tid=ns3::Object, params=0
DcaTxop:DcaTxop(0x862c80)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::DcaTxop, params=1
try to construct "ns3::DcaTxop::Queue"
construct "ns3::DcaTxop::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
DcaTxop:SetMinCw(0x862c80, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
DcaTxop:SetMaxCw(0x862c80, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
DcaTxop:SetAifsn(0x862c80, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
DcaTxop:SetLow(0x862c80, 0x862890)
[mac=00:00:00:00:00:00] DcaTxop:SetManager(0x862c80, 0x862b60)
RegularWifiMac:SetupEdcaQueue(0x8626a0, 3)
EdcaTxopN:EdcaTxopN(0x862f20)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x8631b0)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x862f20, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x862f20, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x862f20, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x862f20, 0x862890)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x862f20, 0x862b60)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x862f20)
RegularWifiMac:SetupEdcaQueue(0x8626a0, 2)
EdcaTxopN:EdcaTxopN(0x8633e0)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x863650)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x8633e0, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x8633e0, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x8633e0, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x8633e0, 0x862890)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x8633e0, 0x862b60)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x8633e0)
RegularWifiMac:SetupEdcaQueue(0x8626a0, 0)
EdcaTxopN:EdcaTxopN(0x863890)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x863b00)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x863890, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x863890, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x863890, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x863890, 0x862890)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x863890, 0x862b60)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x863890)
RegularWifiMac:SetupEdcaQueue(0x8626a0, 1)
EdcaTxopN:EdcaTxopN(0x863d10)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x863fa0)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x863d10, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x863d10, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x863d10, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x863d10, 0x862890)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x863d10, 0x862b60)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x863d10)
AdhocWifiMac:AdhocWifiMac(0x8626a0)
RegularWifiMac:SetTypeOfStation(0x8626a0, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x863890, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x863d10, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x8633e0, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x862f20, 2)
construct tid=ns3::AdhocWifiMac, params=0
construct tid=ns3::RegularWifiMac, params=6
try to construct "ns3::RegularWifiMac::QosSupported"
RegularWifiMac:SetQosSupported(0x8626a0)
construct "ns3::RegularWifiMac::QosSupported"
try to construct "ns3::RegularWifiMac::DcaTxop"
construct "ns3::RegularWifiMac::DcaTxop" from initial value.
try to construct "ns3::RegularWifiMac::VO_EdcaTxopN"
construct "ns3::RegularWifiMac::VO_EdcaTxopN" from initial value.
try to construct "ns3::RegularWifiMac::VI_EdcaTxopN"
construct "ns3::RegularWifiMac::VI_EdcaTxopN" from initial value.
try to construct "ns3::RegularWifiMac::BE_EdcaTxopN"
construct "ns3::RegularWifiMac::BE_EdcaTxopN" from initial value.
try to construct "ns3::RegularWifiMac::BK_EdcaTxopN"
construct "ns3::RegularWifiMac::BK_EdcaTxopN" from initial value.
construct tid=ns3::WifiMac, params=10
try to construct "ns3::WifiMac::CtsTimeout"
RegularWifiMac:SetCtsTimeout(0x8626a0, +75000.0ns)
construct "ns3::WifiMac::CtsTimeout" from initial value.
try to construct "ns3::WifiMac::AckTimeout"
RegularWifiMac:SetAckTimeout(0x8626a0, +75000.0ns)
construct "ns3::WifiMac::AckTimeout" from initial value.
try to construct "ns3::WifiMac::BasicBlockAckTimeout"
RegularWifiMac:SetBasicBlockAckTimeout(0x8626a0, +281000.0ns)
construct "ns3::WifiMac::BasicBlockAckTimeout" from initial value.
try to construct "ns3::WifiMac::CompressedBlockAckTimeout"
RegularWifiMac:SetCompressedBlockAckTimeout(0x8626a0, +99000.0ns)
construct "ns3::WifiMac::CompressedBlockAckTimeout" from initial value.
try to construct "ns3::WifiMac::Sifs"
RegularWifiMac:SetSifs(0x8626a0, +16000.0ns)
construct "ns3::WifiMac::Sifs" from initial value.
try to construct "ns3::WifiMac::EifsNoDifs"
RegularWifiMac:SetEifsNoDifs(0x8626a0, +60000.0ns)
construct "ns3::WifiMac::EifsNoDifs" from initial value.
try to construct "ns3::WifiMac::Slot"
RegularWifiMac:SetSlot(0x8626a0, +9000.0ns)
construct "ns3::WifiMac::Slot" from initial value.
try to construct "ns3::WifiMac::Pifs"
RegularWifiMac:SetPifs(0x8626a0, +25000.0ns)
construct "ns3::WifiMac::Pifs" from initial value.
try to construct "ns3::WifiMac::MaxPropagationDelay"
construct "ns3::WifiMac::MaxPropagationDelay" from initial value.
try to construct "ns3::WifiMac::Ssid"
RegularWifiMac:SetSsid(0x8626a0, default)
construct "ns3::WifiMac::Ssid" from initial value.
construct tid=ns3::Object, params=0
WifiPhy:WifiPhy(0x864200)
YansWifiPhy:YansWifiPhy(0x864200)
WifiPhyStateHelper:WifiPhyStateHelper(0x8643b0)
construct tid=ns3::WifiPhyStateHelper, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::YansWifiPhy, params=11
try to construct "ns3::YansWifiPhy::EnergyDetectionThreshold"
YansWifiPhy:SetEdThreshold(0x864200, -96)
construct "ns3::YansWifiPhy::EnergyDetectionThreshold" from initial value.
try to construct "ns3::YansWifiPhy::CcaMode1Threshold"
YansWifiPhy:SetCcaMode1Threshold(0x864200, -99)
construct "ns3::YansWifiPhy::CcaMode1Threshold" from initial value.
try to construct "ns3::YansWifiPhy::TxGain"
YansWifiPhy:SetTxGain(0x864200, 1)
construct "ns3::YansWifiPhy::TxGain" from initial value.
try to construct "ns3::YansWifiPhy::RxGain"
YansWifiPhy:SetRxGain(0x864200, 0)
construct "ns3::YansWifiPhy::RxGain"
try to construct "ns3::YansWifiPhy::TxPowerLevels"
construct "ns3::YansWifiPhy::TxPowerLevels" from initial value.
try to construct "ns3::YansWifiPhy::TxPowerEnd"
YansWifiPhy:SetTxPowerEnd(0x864200, 16.0206)
construct "ns3::YansWifiPhy::TxPowerEnd" from initial value.
try to construct "ns3::YansWifiPhy::TxPowerStart"
YansWifiPhy:SetTxPowerStart(0x864200, 16.0206)
construct "ns3::YansWifiPhy::TxPowerStart" from initial value.
try to construct "ns3::YansWifiPhy::RxNoiseFigure"
YansWifiPhy:SetRxNoiseFigure(0x864200, 7)
construct "ns3::YansWifiPhy::RxNoiseFigure" from initial value.
try to construct "ns3::YansWifiPhy::State"
construct "ns3::YansWifiPhy::State" from initial value.
try to construct "ns3::YansWifiPhy::ChannelSwitchDelay"
construct "ns3::YansWifiPhy::ChannelSwitchDelay" from initial value.
try to construct "ns3::YansWifiPhy::ChannelNumber"
start at channel 1
construct "ns3::YansWifiPhy::ChannelNumber" from initial value.
construct tid=ns3::WifiPhy, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::NistErrorRateModel, params=0
construct tid=ns3::ErrorRateModel, params=0
construct tid=ns3::Object, params=0
RegularWifiMac:SetAddress(0x8626a0, 00:00:00:00:00:01)
RegularWifiMac:SetBssid(0x8626a0, 00:00:00:00:00:01)
RegularWifiMac:SetSifs(0x8626a0, +10000.0ns)
RegularWifiMac:SetSlot(0x8626a0, +20000.0ns)
RegularWifiMac:SetEifsNoDifs(0x8626a0, +314000.0ns)
RegularWifiMac:SetPifs(0x8626a0, +30000.0ns)
RegularWifiMac:SetCtsTimeout(0x8626a0, +340000.0ns)
RegularWifiMac:SetAckTimeout(0x8626a0, +340000.0ns)
[mac=00:00:00:00:00:01] DcaTxop:SetMinCw(0x862c80, 31)
[mac=00:00:00:00:00:01] DcaTxop:SetMaxCw(0x862c80, 1023)
[mac=00:00:00:00:00:01] DcaTxop:SetAifsn(0x862c80, 2)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMinCw(0x863890, 31)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMaxCw(0x863890, 1023)
[mac=00:00:00:00:00:01] EdcaTxopN:SetAifsn(0x863890, 3)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMinCw(0x863d10, 31)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMaxCw(0x863d10, 1023)
[mac=00:00:00:00:00:01] EdcaTxopN:SetAifsn(0x863d10, 7)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMinCw(0x8633e0, 15)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMaxCw(0x8633e0, 31)
[mac=00:00:00:00:00:01] EdcaTxopN:SetAifsn(0x8633e0, 2)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMinCw(0x862f20, 7)
[mac=00:00:00:00:00:01] EdcaTxopN:SetMaxCw(0x862f20, 15)
[mac=00:00:00:00:00:01] EdcaTxopN:SetAifsn(0x862f20, 2)
YansWifiPhy:ConfigureStandard(0x864200, 1)
YansWifiPhy:Configure80211b(0x864200)
RegularWifiMac:SetWifiRemoteStationManager(0x8626a0, 0x862590)
[mac=00:00:00:00:00:01] DcaTxop:SetWifiRemoteStationManager(0x862c80, 0x862590)
[mac=00:00:00:00:00:01] EdcaTxopN:SetWifiRemoteStationManager(0x863890, 0x862590)
[mac=00:00:00:00:00:01] EdcaTxopN:SetWifiRemoteStationManager(0x863d10, 0x862590)
[mac=00:00:00:00:00:01] EdcaTxopN:SetWifiRemoteStationManager(0x8633e0, 0x862590)
[mac=00:00:00:00:00:01] EdcaTxopN:SetWifiRemoteStationManager(0x862f20, 0x862590)
RegularWifiMac:SetWifiPhy(0x8626a0, 0x864200)
RegularWifiMac:SetForwardUpCallback(0x8626a0)
AdhocWifiMac:SetLinkUpCallback(0x8626a0)
RegularWifiMac:SetLinkUpCallback(0x8626a0)
RegularWifiMac:SetLinkDownCallback(0x8626a0)
DefaultSimulatorImpl:ScheduleWithContext(0x861be0, 0, 0, 0, 0x864700)
MapScheduler:Insert(0x861f40, 0x864700, 0, 8)
node=0x861e40, mob=0
WifiNetDevice:WifiNetDevice()
construct tid=ns3::WifiNetDevice, params=5
try to construct "ns3::WifiNetDevice::Mtu"
construct "ns3::WifiNetDevice::Mtu" from initial value.
try to construct "ns3::WifiNetDevice::Channel"
construct "ns3::WifiNetDevice::Channel" from initial value.
try to construct "ns3::WifiNetDevice::Phy"
construct "ns3::WifiNetDevice::Phy" from initial value.
try to construct "ns3::WifiNetDevice::Mac"
construct "ns3::WifiNetDevice::Mac" from initial value.
try to construct "ns3::WifiNetDevice::RemoteStationManager"
construct "ns3::WifiNetDevice::RemoteStationManager" from initial value.
construct tid=ns3::NetDevice, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::ConstantRateWifiManager, params=2
try to construct "ns3::ConstantRateWifiManager::DataMode"
construct "ns3::ConstantRateWifiManager::DataMode"
try to construct "ns3::ConstantRateWifiManager::ControlMode"
construct "ns3::ConstantRateWifiManager::ControlMode"
construct tid=ns3::WifiRemoteStationManager, params=6
try to construct "ns3::WifiRemoteStationManager::IsLowLatency"
construct "ns3::WifiRemoteStationManager::IsLowLatency" from initial value.
try to construct "ns3::WifiRemoteStationManager::MaxSsrc"
construct "ns3::WifiRemoteStationManager::MaxSsrc" from initial value.
try to construct "ns3::WifiRemoteStationManager::MaxSlrc"
construct "ns3::WifiRemoteStationManager::MaxSlrc" from initial value.
try to construct "ns3::WifiRemoteStationManager::RtsCtsThreshold"
construct "ns3::WifiRemoteStationManager::RtsCtsThreshold" from global
try to construct "ns3::WifiRemoteStationManager::FragmentationThreshold"
construct "ns3::WifiRemoteStationManager::FragmentationThreshold" from global
try to construct "ns3::WifiRemoteStationManager::NonUnicastMode"
construct "ns3::WifiRemoteStationManager::NonUnicastMode" from global
construct tid=ns3::Object, params=0
RegularWifiMac:RegularWifiMac(0x864960)
MacRxMiddle:MacRxMiddle()
MacRxMiddle:SetForwardCallback()
[mac=00:00:00:00:00:00] MacLow:MacLow(0x864bc0)
construct tid=ns3::Object, params=0
DcaTxop:DcaTxop(0x864fe0)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::DcaTxop, params=1
try to construct "ns3::DcaTxop::Queue"
construct "ns3::DcaTxop::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
DcaTxop:SetMinCw(0x864fe0, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
DcaTxop:SetMaxCw(0x864fe0, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
DcaTxop:SetAifsn(0x864fe0, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
DcaTxop:SetLow(0x864fe0, 0x864bc0)
[mac=00:00:00:00:00:00] DcaTxop:SetManager(0x864fe0, 0x864ec0)
RegularWifiMac:SetupEdcaQueue(0x864960, 3)
EdcaTxopN:EdcaTxopN(0x8652b0)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x865540)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x8652b0, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x8652b0, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x8652b0, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x8652b0, 0x864bc0)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x8652b0, 0x864ec0)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x8652b0)
RegularWifiMac:SetupEdcaQueue(0x864960, 2)
EdcaTxopN:EdcaTxopN(0x865770)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x8659e0)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x865770, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x865770, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x865770, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x865770, 0x864bc0)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x865770, 0x864ec0)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x865770)
RegularWifiMac:SetupEdcaQueue(0x864960, 0)
EdcaTxopN:EdcaTxopN(0x865c20)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x865e90)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x865c20, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x865c20, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x865c20, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x865c20, 0x864bc0)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x865c20, 0x864ec0)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x865c20)
RegularWifiMac:SetupEdcaQueue(0x864960, 1)
EdcaTxopN:EdcaTxopN(0x8660a0)
construct tid=ns3::WifiMacQueue, params=2
try to construct "ns3::WifiMacQueue::MaxPacketNumber"
construct "ns3::WifiMacQueue::MaxPacketNumber" from initial value.
try to construct "ns3::WifiMacQueue::MaxDelay"
construct "ns3::WifiMacQueue::MaxDelay" from initial value.
construct tid=ns3::Object, params=0
BlockAckManager:SetMaxPacketDelay(0x866330)
construct tid=ns3::EdcaTxopN, params=3
try to construct "ns3::EdcaTxopN::BlockAckThreshold"
construct "ns3::EdcaTxopN::BlockAckThreshold" from initial value.
try to construct "ns3::EdcaTxopN::BlockAckInactivityTimeout"
construct "ns3::EdcaTxopN::BlockAckInactivityTimeout" from initial value.
try to construct "ns3::EdcaTxopN::Queue"
construct "ns3::EdcaTxopN::Queue" from initial value.
construct tid=ns3::Dcf, params=3
try to construct "ns3::Dcf::MinCw"
EdcaTxopN:SetMinCw(0x8660a0, 15)
construct "ns3::Dcf::MinCw" from initial value.
try to construct "ns3::Dcf::MaxCw"
EdcaTxopN:SetMaxCw(0x8660a0, 1023)
construct "ns3::Dcf::MaxCw" from initial value.
try to construct "ns3::Dcf::Aifsn"
EdcaTxopN:SetAifsn(0x8660a0, 2)
construct "ns3::Dcf::Aifsn" from initial value.
construct tid=ns3::Object, params=0
EdcaTxopN:SetLow(0x8660a0, 0x864bc0)
[mac=00:00:00:00:00:00] EdcaTxopN:SetManager(0x8660a0, 0x864ec0)
[mac=00:00:00:00:00:00] EdcaTxopN:CompleteConfig(0x8660a0)
AdhocWifiMac:AdhocWifiMac(0x864960)
RegularWifiMac:SetTypeOfStation(0x864960, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x865c20, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x8660a0, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x865770, 2)
[mac=00:00:00:00:00:00] EdcaTxopN:SetTypeOfStation(0x8652b0, 2)
construct tid=ns3::AdhocWifiMac, params=0
construct tid=ns3::RegularWifiMac, params=6
try to construct "ns3::RegularWifiMac::QosSupported"
RegularWifiMac:SetQosSupported(0x864960)
construct "ns3::RegularWifiMac::QosSupported"
try to construct "ns3::RegularWifiMac::DcaTxop"
construct "ns3::RegularWifiMac::DcaTxop" from initial value.
try to construct "ns3::RegularWifiMac::VO_EdcaTxopN"
construct "ns3::RegularWifiMac::VO_EdcaTxopN" from initial value.
try to construct "ns3::RegularWifiMac::VI_EdcaTxopN"
construct "ns3::RegularWifiMac::VI_EdcaTxopN" from initial value.
try to construct "ns3::RegularWifiMac::BE_EdcaTxopN"
construct "ns3::RegularWifiMac::BE_EdcaTxopN" from initial value.
try to construct "ns3::RegularWifiMac::BK_EdcaTxopN"
construct "ns3::RegularWifiMac::BK_EdcaTxopN" from initial value.
construct tid=ns3::WifiMac, params=10
try to construct "ns3::WifiMac::CtsTimeout"
RegularWifiMac:SetCtsTimeout(0x864960, +75000.0ns)
construct "ns3::WifiMac::CtsTimeout" from initial value.
try to construct "ns3::WifiMac::AckTimeout"
RegularWifiMac:SetAckTimeout(0x864960, +75000.0ns)
construct "ns3::WifiMac::AckTimeout" from initial value.
try to construct "ns3::WifiMac::BasicBlockAckTimeout"
RegularWifiMac:SetBasicBlockAckTimeout(0x864960, +281000.0ns)
construct "ns3::WifiMac::BasicBlockAckTimeout" from initial value.
try to construct "ns3::WifiMac::CompressedBlockAckTimeout"
RegularWifiMac:SetCompressedBlockAckTimeout(0x864960, +99000.0ns)
construct "ns3::WifiMac::CompressedBlockAckTimeout" from initial value.
try to construct "ns3::WifiMac::Sifs"
RegularWifiMac:SetSifs(0x864960, +16000.0ns)
construct "ns3::WifiMac::Sifs" from initial value.
try to construct "ns3::WifiMac::EifsNoDifs"
RegularWifiMac:SetEifsNoDifs(0x864960, +60000.0ns)
construct "ns3::WifiMac::EifsNoDifs" from initial value.
try to construct "ns3::WifiMac::Slot"
RegularWifiMac:SetSlot(0x864960, +9000.0ns)
construct "ns3::WifiMac::Slot" from initial value.
try to construct "ns3::WifiMac::Pifs"
RegularWifiMac:SetPifs(0x864960, +25000.0ns)
construct "ns3::WifiMac::Pifs" from initial value.
try to construct "ns3::WifiMac::MaxPropagationDelay"
construct "ns3::WifiMac::MaxPropagationDelay" from initial value.
try to construct "ns3::WifiMac::Ssid"
RegularWifiMac:SetSsid(0x864960, default)
construct "ns3::WifiMac::Ssid" from initial value.
construct tid=ns3::Object, params=0
WifiPhy:WifiPhy(0x866590)
YansWifiPhy:YansWifiPhy(0x866590)
WifiPhyStateHelper:WifiPhyStateHelper(0x866740)
construct tid=ns3::WifiPhyStateHelper, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::YansWifiPhy, params=11
try to construct "ns3::YansWifiPhy::EnergyDetectionThreshold"
YansWifiPhy:SetEdThreshold(0x866590, -96)
construct "ns3::YansWifiPhy::EnergyDetectionThreshold" from initial value.
try to construct "ns3::YansWifiPhy::CcaMode1Threshold"
YansWifiPhy:SetCcaMode1Threshold(0x866590, -99)
construct "ns3::YansWifiPhy::CcaMode1Threshold" from initial value.
try to construct "ns3::YansWifiPhy::TxGain"
YansWifiPhy:SetTxGain(0x866590, 1)
construct "ns3::YansWifiPhy::TxGain" from initial value.
try to construct "ns3::YansWifiPhy::RxGain"
YansWifiPhy:SetRxGain(0x866590, 0)
construct "ns3::YansWifiPhy::RxGain"
try to construct "ns3::YansWifiPhy::TxPowerLevels"
construct "ns3::YansWifiPhy::TxPowerLevels" from initial value.
try to construct "ns3::YansWifiPhy::TxPowerEnd"
YansWifiPhy:SetTxPowerEnd(0x866590, 16.0206)
construct "ns3::YansWifiPhy::TxPowerEnd" from initial value.
try to construct "ns3::YansWifiPhy::TxPowerStart"
YansWifiPhy:SetTxPowerStart(0x866590, 16.0206)
construct "ns3::YansWifiPhy::TxPowerStart" from initial value.
try to construct "ns3::YansWifiPhy::RxNoiseFigure"
YansWifiPhy:SetRxNoiseFigure(0x866590, 7)
construct "ns3::YansWifiPhy::RxNoiseFigure" from initial value.
try to construct "ns3::YansWifiPhy::State"
construct "ns3::YansWifiPhy::State" from initial value.
try to construct "ns3::YansWifiPhy::ChannelSwitchDelay"
construct "ns3::YansWifiPhy::ChannelSwitchDelay" from initial value.
try to construct "ns3::YansWifiPhy::ChannelNumber"
start at channel 1
construct "ns3::YansWifiPhy::ChannelNumber" from initial value.
construct tid=ns3::WifiPhy, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::NistErrorRateModel, params=0
construct tid=ns3::ErrorRateModel, params=0
construct tid=ns3::Object, params=0
RegularWifiMac:SetAddress(0x864960, 00:00:00:00:00:02)
RegularWifiMac:SetBssid(0x864960, 00:00:00:00:00:02)
RegularWifiMac:SetSifs(0x864960, +10000.0ns)
RegularWifiMac:SetSlot(0x864960, +20000.0ns)
RegularWifiMac:SetEifsNoDifs(0x864960, +314000.0ns)
RegularWifiMac:SetPifs(0x864960, +30000.0ns)
RegularWifiMac:SetCtsTimeout(0x864960, +340000.0ns)
RegularWifiMac:SetAckTimeout(0x864960, +340000.0ns)
[mac=00:00:00:00:00:02] DcaTxop:SetMinCw(0x864fe0, 31)
[mac=00:00:00:00:00:02] DcaTxop:SetMaxCw(0x864fe0, 1023)
[mac=00:00:00:00:00:02] DcaTxop:SetAifsn(0x864fe0, 2)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMinCw(0x865c20, 31)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMaxCw(0x865c20, 1023)
[mac=00:00:00:00:00:02] EdcaTxopN:SetAifsn(0x865c20, 3)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMinCw(0x8660a0, 31)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMaxCw(0x8660a0, 1023)
[mac=00:00:00:00:00:02] EdcaTxopN:SetAifsn(0x8660a0, 7)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMinCw(0x865770, 15)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMaxCw(0x865770, 31)
[mac=00:00:00:00:00:02] EdcaTxopN:SetAifsn(0x865770, 2)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMinCw(0x8652b0, 7)
[mac=00:00:00:00:00:02] EdcaTxopN:SetMaxCw(0x8652b0, 15)
[mac=00:00:00:00:00:02] EdcaTxopN:SetAifsn(0x8652b0, 2)
YansWifiPhy:ConfigureStandard(0x866590, 1)
YansWifiPhy:Configure80211b(0x866590)
RegularWifiMac:SetWifiRemoteStationManager(0x864960, 0x864850)
[mac=00:00:00:00:00:02] DcaTxop:SetWifiRemoteStationManager(0x864fe0, 0x864850)
[mac=00:00:00:00:00:02] EdcaTxopN:SetWifiRemoteStationManager(0x865c20, 0x864850)
[mac=00:00:00:00:00:02] EdcaTxopN:SetWifiRemoteStationManager(0x8660a0, 0x864850)
[mac=00:00:00:00:00:02] EdcaTxopN:SetWifiRemoteStationManager(0x865770, 0x864850)
[mac=00:00:00:00:00:02] EdcaTxopN:SetWifiRemoteStationManager(0x8652b0, 0x864850)
RegularWifiMac:SetWifiPhy(0x864960, 0x866590)
RegularWifiMac:SetForwardUpCallback(0x864960)
AdhocWifiMac:SetLinkUpCallback(0x864960)
RegularWifiMac:SetLinkUpCallback(0x864960)
RegularWifiMac:SetLinkDownCallback(0x864960)
DefaultSimulatorImpl:ScheduleWithContext(0x861be0, 1, 0, 0, 0x866a70)
MapScheduler:Insert(0x861f40, 0x866a70, 0, 9)
node=0x862000, mob=0
construct tid=ns3::RandomRectanglePositionAllocator, params=2
try to construct "ns3::RandomRectanglePositionAllocator::X"
construct "ns3::RandomRectanglePositionAllocator::X"
try to construct "ns3::RandomRectanglePositionAllocator::Y"
construct "ns3::RandomRectanglePositionAllocator::Y"
construct tid=ns3::PositionAllocator, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::ListPositionAllocator, params=0
construct tid=ns3::PositionAllocator, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::ConstantPositionMobilityModel, params=0
construct tid=ns3::MobilityModel, params=2
try to construct "ns3::MobilityModel::Position"
try to construct "ns3::MobilityModel::Velocity"
construct tid=ns3::Object, params=0
node=0x861e40, mob=0x866da0
construct tid=ns3::ConstantPositionMobilityModel, params=0
construct tid=ns3::MobilityModel, params=2
try to construct "ns3::MobilityModel::Position"
try to construct "ns3::MobilityModel::Velocity"
construct tid=ns3::Object, params=0
node=0x862000, mob=0x866df0
ArpL3Protocol:ArpL3Protocol(0x866ed0)
construct tid=ns3::ArpL3Protocol, params=1
try to construct "ns3::ArpL3Protocol::CacheList"
construct "ns3::ArpL3Protocol::CacheList" from initial value.
construct tid=ns3::Object, params=0
ArpL3Protocol:SetNode(0x866ed0)
Ipv4L3Protocol:Ipv4L3Protocol(0x866f20)
construct tid=ns3::Ipv4L3Protocol, params=2
try to construct "ns3::Ipv4L3Protocol::DefaultTtl"
construct "ns3::Ipv4L3Protocol::DefaultTtl" from initial value.
try to construct "ns3::Ipv4L3Protocol::InterfaceList"
construct "ns3::Ipv4L3Protocol::InterfaceList" from initial value.
construct tid=ns3::Ipv4, params=2
try to construct "ns3::Ipv4::IpForward"
Ipv4L3Protocol:SetIpForward(0x866f20, 1)
construct "ns3::Ipv4::IpForward" from initial value.
try to construct "ns3::Ipv4::WeakEsModel"
construct "ns3::Ipv4::WeakEsModel" from initial value.
construct tid=ns3::Object, params=0
Ipv4L3Protocol:SetupLoopback(0x866f20)
Ipv4Interface:Ipv4Interface(0x867000)
construct tid=ns3::Ipv4Interface, params=1
try to construct "ns3::Ipv4Interface::ArpCache"
construct "ns3::Ipv4Interface::ArpCache" from initial value.
construct tid=ns3::Object, params=0
LoopbackNetDevice:LoopbackNetDevice()
construct tid=ns3::LoopbackNetDevice, params=0
construct tid=ns3::NetDevice, params=0
construct tid=ns3::Object, params=0
DefaultSimulatorImpl:ScheduleWithContext(0x861be0, 0, 0, 0, 0x8670a0)
MapScheduler:Insert(0x861f40, 0x8670a0, 0, 10)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634c00)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634c20)
Ipv4Interface:AddAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x867120)
Ipv4L3Protocol:AddIpv4Interface(0x866f20, 0x867000)
Ipv4Interface:SetUp()
construct tid=ns3::Icmpv4L4Protocol, params=0
construct tid=ns3::Ipv4L4Protocol, params=1
try to construct "ns3::Ipv4L4Protocol::ProtocolNumber"
construct "ns3::Ipv4L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::Ipv4RawSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv4EndPointDemux:Ipv4EndPointDemux()
UdpL4Protocol:UdpL4Protocol()
construct tid=ns3::UdpL4Protocol, params=1
try to construct "ns3::UdpL4Protocol::SocketList"
construct "ns3::UdpL4Protocol::SocketList" from initial value.
construct tid=ns3::Ipv4L4Protocol, params=1
try to construct "ns3::Ipv4L4Protocol::ProtocolNumber"
construct "ns3::Ipv4L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::UdpSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv4EndPointDemux:Ipv4EndPointDemux()
TcpL4Protocol:TcpL4Protocol()
Made a TcpL4Protocol 0x8673f0
construct tid=ns3::TcpL4Protocol, params=3
try to construct "ns3::TcpL4Protocol::RttEstimatorType"
construct "ns3::TcpL4Protocol::RttEstimatorType" from initial value.
try to construct "ns3::TcpL4Protocol::SocketType"
construct "ns3::TcpL4Protocol::SocketType" from initial value.
try to construct "ns3::TcpL4Protocol::SocketList"
construct "ns3::TcpL4Protocol::SocketList" from initial value.
construct tid=ns3::Ipv4L4Protocol, params=1
try to construct "ns3::Ipv4L4Protocol::ProtocolNumber"
construct "ns3::Ipv4L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::TcpSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::PacketSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv4ListRouting:Ipv4ListRouting()
construct tid=ns3::Ipv4ListRouting, params=0
construct tid=ns3::Ipv4RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv4StaticRouting:Ipv4StaticRouting(0x867370)
construct tid=ns3::Ipv4StaticRouting, params=0
construct tid=ns3::Ipv4RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv4ListRouting:AddRoutingProtocol(0x866c90, ns3::Ipv4StaticRouting, 0)
Adding GlobalRouter interface to node 0
GlobalRouter:GlobalRouter()
construct tid=ns3::GlobalRouter, params=0
construct tid=ns3::Object, params=0
Adding GlobalRouting Protocol to node 0
Ipv4GlobalRouting:Ipv4GlobalRouting()
construct tid=ns3::Ipv4GlobalRouting, params=2
try to construct "ns3::Ipv4GlobalRouting::RandomEcmpRouting"
construct "ns3::Ipv4GlobalRouting::RandomEcmpRouting" from initial value.
try to construct "ns3::Ipv4GlobalRouting::RespondToInterfaceEvents"
construct "ns3::Ipv4GlobalRouting::RespondToInterfaceEvents" from initial value.
construct tid=ns3::Object, params=0
Ipv4ListRouting:AddRoutingProtocol(0x866c90, ns3::Ipv4GlobalRouting, -10)
Ipv4L3Protocol:SetRoutingProtocol(0x866f20)
Ipv4ListRouting:SetIpv4(0x866c90, 0x866f20)
Ipv4StaticRouting:SetIpv4(0x867370, 0x866f20)
Ipv4Interface:IsUp()
0 [node 0] Ipv4StaticRouting:NotifyInterfaceUp(0x867370, 0)
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634880)
Ipv4InterfaceAddress:GetLocal()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348a0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348c0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634920)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634900)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348e0)
Ipv4InterfaceAddress:GetLocal()
0 [node 0] Ipv4StaticRouting:AddNetworkRouteTo(0x867370, 127.0.0.0,  , 255.0.0.0,  , 0,  , 0)
Ipv4Interface:GetNAddresses()
Ipv4GlobalRouting:SetIpv4(0x8675e0, 0x866f20)
Ipv6L3Protocol:Ipv6L3Protocol()
construct tid=ns3::Ipv6L3Protocol, params=2
try to construct "ns3::Ipv6L3Protocol::DefaultTtl"
construct "ns3::Ipv6L3Protocol::DefaultTtl" from initial value.
try to construct "ns3::Ipv6L3Protocol::InterfaceList"
construct "ns3::Ipv6L3Protocol::InterfaceList" from initial value.
construct tid=ns3::Ipv6, params=1
try to construct "ns3::Ipv6::IpForward"
Ipv6L3Protocol:SetIpForward(0x8677c0, 0)
construct "ns3::Ipv6::IpForward" from initial value.
construct tid=ns3::Object, params=0
Ipv6L3Protocol:NotifyNewAggregate()
Ipv6L3Protocol:SetNode(0x8677c0, 0x861e40)
Ipv6L3Protocol:SetupLoopback()
Ipv6Interface:Ipv6Interface(0x867450)
construct tid=ns3::Ipv6Interface, params=0
construct tid=ns3::Object, params=0
Ipv6Interface:SetDevice(0x867450, 0x867050)
Ipv6Interface:DoSetup()
Ipv6Interface:SetNode(0x867450, 0x861e40)
Ipv6Interface:DoSetup()
Ipv6InterfaceAddress:Ipv6InterfaceAddress(0x7fffba634b30, 0000:0000:0000:0000:0000:0000:0000:0001, ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff)
Ipv6InterfaceAddress:SetAddress(0x7fffba634b30, 0000:0000:0000:0000:0000:0000:0000:0001)
Ipv6InterfaceAddress:SetState(0x7fffba634b30, 5)
Ipv6Interface:AddAddress()
Ipv6InterfaceAddress:GetAddress()
Ipv6L3Protocol:GetIcmpv6()
Icmpv6L4Protocol:GetStaticProtocolNumber()
Ipv6L3Protocol:GetProtocol(0x8677c0, 58)
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:AddIpv6Interface(0x8677c0, 0x867450)
Ipv6Interface:SetUp()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Icmpv6L4Protocol:Icmpv6L4Protocol()
construct tid=ns3::Icmpv6L4Protocol, params=1
try to construct "ns3::Icmpv6L4Protocol::DAD"
construct "ns3::Icmpv6L4Protocol::DAD" from initial value.
construct tid=ns3::Ipv6L4Protocol, params=1
try to construct "ns3::Ipv6L4Protocol::ProtocolNumber"
construct "ns3::Ipv6L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:SetNode(0x8679d0, 0x861e40)
Ipv6L3Protocol:Insert(0x8677c0, 0x8679d0)
construct tid=ns3::Ipv6RawSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
Ipv6ListRouting:Ipv6ListRouting()
construct tid=ns3::Ipv6ListRouting, params=0
construct tid=ns3::Ipv6RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv6StaticRouting:Ipv6StaticRouting()
construct tid=ns3::Ipv6StaticRouting, params=0
construct tid=ns3::Ipv6RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv6ListRouting:AddRoutingProtocol(0x867210, ns3::Ipv6StaticRouting, 0)
Ipv6L3Protocol:SetRoutingProtocol(0x8677c0, 0x867210)
Ipv6ListRouting:SetIpv6(0x867210, 0x8677c0)
Ipv6StaticRouting:SetIpv6(0x867b80, 0x8677c0)
Ipv6L3Protocol:GetNInterfaces()
Ipv6L3Protocol:IsUp(0x8677c0, 0)
Ipv6L3Protocol:GetInterface(0x8677c0, 0)
Ipv6Interface:IsUp()
Ipv6L3Protocol:GetNAddresses(0x8677c0, 0)
Ipv6L3Protocol:GetInterface(0x8677c0, 0)
Ipv6Interface:GetNAddresses()
Ipv6L3Protocol:GetAddress(0x8677c0, 0, 0)
Ipv6L3Protocol:GetInterface(0x8677c0, 0)
Ipv6Interface:GetAddress(0x867450, 0)
Ipv6InterfaceAddress:GetAddress()
Ipv6L3Protocol:GetAddress(0x8677c0, 0, 0)
Ipv6L3Protocol:GetInterface(0x8677c0, 0)
Ipv6Interface:GetAddress(0x867450, 0)
Ipv6InterfaceAddress:GetPrefix()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:GetAddress(0x8677c0, 0, 0)
Ipv6L3Protocol:GetInterface(0x8677c0, 0)
Ipv6Interface:GetAddress(0x867450, 0)
Ipv6InterfaceAddress:GetPrefix()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:GetAddress(0x8677c0, 0, 0)
Ipv6L3Protocol:GetInterface(0x8677c0, 0)
Ipv6Interface:GetAddress(0x867450, 0)
Ipv6InterfaceAddress:GetAddress()
Ipv6StaticRouting:AddHostRouteTo(0x867b80, 0000:0000:0000:0000:0000:0000:0000:0001, 0, 0)
Ipv6StaticRouting:AddNetworkRouteTo(0x867b80, 0000:0000:0000:0000:0000:0000:0000:0001, ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff, 0)
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:GetNAddresses(0x8677c0, 0)
Ipv6L3Protocol:GetInterface(0x8677c0, 0)
Ipv6Interface:GetNAddresses()
Ipv6L3Protocol:GetNInterfaces()
construct tid=ns3::Ipv6ExtensionDemux, params=1
try to construct "ns3::Ipv6ExtensionDemux::Extensions"
construct "ns3::Ipv6ExtensionDemux::Extensions" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:Ipv6ExtensionHopByHop()
construct tid=ns3::Ipv6ExtensionHopByHop, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x867ce0, 0x861e40)
Ipv6Extension:Ipv6ExtensionDestination()
construct tid=ns3::Ipv6ExtensionDestination, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x867d40, 0x861e40)
Ipv6Extension:Ipv6ExtensionFragment()
construct tid=ns3::Ipv6ExtensionFragment, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x8676a0, 0x861e40)
Ipv6Extension:Ipv6ExtensionRouting()
construct tid=ns3::Ipv6ExtensionRouting, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x867dc0, 0x861e40)
construct tid=ns3::Ipv6ExtensionRoutingDemux, params=1
try to construct "ns3::Ipv6ExtensionRoutingDemux::Routing Extensions"
construct "ns3::Ipv6ExtensionRoutingDemux::Routing Extensions" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:Ipv6ExtensionRouting()
Ipv6Extension:Ipv6ExtensionLooseRouting()
construct tid=ns3::Ipv6ExtensionLooseRouting, params=0
construct tid=ns3::Ipv6ExtensionRouting, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x867f00, 0x861e40)
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
construct tid=ns3::Ipv6OptionDemux, params=1
try to construct "ns3::Ipv6OptionDemux::Options"
construct "ns3::Ipv6OptionDemux::Options" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:Ipv6OptionPad1()
construct tid=ns3::Ipv6OptionPad1, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x867b30, 0x861e40)
Ipv6Option:Ipv6OptionPadn()
construct tid=ns3::Ipv6OptionPadn, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x867f80, 0x861e40)
Ipv6Option:Ipv6OptionJumbogram()
construct tid=ns3::Ipv6OptionJumbogram, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x867fb0, 0x861e40)
Ipv6Option:Ipv6OptionRouterAlert()
construct tid=ns3::Ipv6OptionRouterAlert, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x8680b0, 0x861e40)
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
ArpL3Protocol:ArpL3Protocol(0x868050)
construct tid=ns3::ArpL3Protocol, params=1
try to construct "ns3::ArpL3Protocol::CacheList"
construct "ns3::ArpL3Protocol::CacheList" from initial value.
construct tid=ns3::Object, params=0
ArpL3Protocol:SetNode(0x868050)
Ipv4L3Protocol:Ipv4L3Protocol(0x868250)
construct tid=ns3::Ipv4L3Protocol, params=2
try to construct "ns3::Ipv4L3Protocol::DefaultTtl"
construct "ns3::Ipv4L3Protocol::DefaultTtl" from initial value.
try to construct "ns3::Ipv4L3Protocol::InterfaceList"
construct "ns3::Ipv4L3Protocol::InterfaceList" from initial value.
construct tid=ns3::Ipv4, params=2
try to construct "ns3::Ipv4::IpForward"
Ipv4L3Protocol:SetIpForward(0x868250, 1)
construct "ns3::Ipv4::IpForward" from initial value.
try to construct "ns3::Ipv4::WeakEsModel"
construct "ns3::Ipv4::WeakEsModel" from initial value.
construct tid=ns3::Object, params=0
Ipv4L3Protocol:SetupLoopback(0x868250)
Ipv4Interface:Ipv4Interface(0x868360)
construct tid=ns3::Ipv4Interface, params=1
try to construct "ns3::Ipv4Interface::ArpCache"
construct "ns3::Ipv4Interface::ArpCache" from initial value.
construct tid=ns3::Object, params=0
LoopbackNetDevice:LoopbackNetDevice()
construct tid=ns3::LoopbackNetDevice, params=0
construct tid=ns3::NetDevice, params=0
construct tid=ns3::Object, params=0
DefaultSimulatorImpl:ScheduleWithContext(0x861be0, 1, 0, 0, 0x868470)
MapScheduler:Insert(0x861f40, 0x868470, 0, b)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634c00)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634c20)
Ipv4Interface:AddAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x8684f0)
Ipv4L3Protocol:AddIpv4Interface(0x868250, 0x868360)
Ipv4Interface:SetUp()
construct tid=ns3::Icmpv4L4Protocol, params=0
construct tid=ns3::Ipv4L4Protocol, params=1
try to construct "ns3::Ipv4L4Protocol::ProtocolNumber"
construct "ns3::Ipv4L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::Ipv4RawSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv4EndPointDemux:Ipv4EndPointDemux()
UdpL4Protocol:UdpL4Protocol()
construct tid=ns3::UdpL4Protocol, params=1
try to construct "ns3::UdpL4Protocol::SocketList"
construct "ns3::UdpL4Protocol::SocketList" from initial value.
construct tid=ns3::Ipv4L4Protocol, params=1
try to construct "ns3::Ipv4L4Protocol::ProtocolNumber"
construct "ns3::Ipv4L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::UdpSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv4EndPointDemux:Ipv4EndPointDemux()
TcpL4Protocol:TcpL4Protocol()
Made a TcpL4Protocol 0x868800
construct tid=ns3::TcpL4Protocol, params=3
try to construct "ns3::TcpL4Protocol::RttEstimatorType"
construct "ns3::TcpL4Protocol::RttEstimatorType" from initial value.
try to construct "ns3::TcpL4Protocol::SocketType"
construct "ns3::TcpL4Protocol::SocketType" from initial value.
try to construct "ns3::TcpL4Protocol::SocketList"
construct "ns3::TcpL4Protocol::SocketList" from initial value.
construct tid=ns3::Ipv4L4Protocol, params=1
try to construct "ns3::Ipv4L4Protocol::ProtocolNumber"
construct "ns3::Ipv4L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
construct tid=ns3::TcpSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
construct tid=ns3::PacketSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv4ListRouting:Ipv4ListRouting()
construct tid=ns3::Ipv4ListRouting, params=0
construct tid=ns3::Ipv4RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv4StaticRouting:Ipv4StaticRouting(0x868780)
construct tid=ns3::Ipv4StaticRouting, params=0
construct tid=ns3::Ipv4RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv4ListRouting:AddRoutingProtocol(0x868010, ns3::Ipv4StaticRouting, 0)
Adding GlobalRouter interface to node 1
GlobalRouter:GlobalRouter()
construct tid=ns3::GlobalRouter, params=0
construct tid=ns3::Object, params=0
Adding GlobalRouting Protocol to node 1
Ipv4GlobalRouting:Ipv4GlobalRouting()
construct tid=ns3::Ipv4GlobalRouting, params=2
try to construct "ns3::Ipv4GlobalRouting::RandomEcmpRouting"
construct "ns3::Ipv4GlobalRouting::RandomEcmpRouting" from initial value.
try to construct "ns3::Ipv4GlobalRouting::RespondToInterfaceEvents"
construct "ns3::Ipv4GlobalRouting::RespondToInterfaceEvents" from initial value.
construct tid=ns3::Object, params=0
Ipv4ListRouting:AddRoutingProtocol(0x868010, ns3::Ipv4GlobalRouting, fff6)
Ipv4L3Protocol:SetRoutingProtocol(0x868250)
Ipv4ListRouting:SetIpv4(0x868010, 0x868250)
Ipv4StaticRouting:SetIpv4(0x868780, 0x868250)
Ipv4Interface:IsUp()
0 [node 1] Ipv4StaticRouting:NotifyInterfaceUp(0x868780, 0)
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634880)
Ipv4InterfaceAddress:GetLocal()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348a0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348c0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634920)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634900)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348e0)
Ipv4InterfaceAddress:GetLocal()
0 [node 1] Ipv4StaticRouting:AddNetworkRouteTo(0x868780, 7f.0.0.0,  , ff.0.0.0,  , 0,  , 0)
Ipv4Interface:GetNAddresses()
Ipv4GlobalRouting:SetIpv4(0x8689f0, 0x868250)
Ipv6L3Protocol:Ipv6L3Protocol()
construct tid=ns3::Ipv6L3Protocol, params=2
try to construct "ns3::Ipv6L3Protocol::DefaultTtl"
construct "ns3::Ipv6L3Protocol::DefaultTtl" from initial value.
try to construct "ns3::Ipv6L3Protocol::InterfaceList"
construct "ns3::Ipv6L3Protocol::InterfaceList" from initial value.
construct tid=ns3::Ipv6, params=1
try to construct "ns3::Ipv6::IpForward"
Ipv6L3Protocol:SetIpForward(0x868bd0, 0)
construct "ns3::Ipv6::IpForward" from initial value.
construct tid=ns3::Object, params=0
Ipv6L3Protocol:NotifyNewAggregate()
Ipv6L3Protocol:SetNode(0x868bd0, 0x862000)
Ipv6L3Protocol:SetupLoopback()
Ipv6Interface:Ipv6Interface(0x868860)
construct tid=ns3::Ipv6Interface, params=0
construct tid=ns3::Object, params=0
Ipv6Interface:SetDevice(0x868860, 0x8683b0)
Ipv6Interface:DoSetup()
Ipv6Interface:SetNode(0x868860, 0x862000)
Ipv6Interface:DoSetup()
Ipv6InterfaceAddress:Ipv6InterfaceAddress(0x7fffba634b30, 0000:0000:0000:0000:0000:0000:0000:0001, ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff)
Ipv6InterfaceAddress:SetAddress(0x7fffba634b30, 0000:0000:0000:0000:0000:0000:0000:0001)
Ipv6InterfaceAddress:SetState(0x7fffba634b30, 5)
Ipv6Interface:AddAddress()
Ipv6InterfaceAddress:GetAddress()
Ipv6L3Protocol:GetIcmpv6()
Icmpv6L4Protocol:GetStaticProtocolNumber()
Ipv6L3Protocol:GetProtocol(0x868bd0, 58)
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:AddIpv6Interface(0x868bd0, 0x868860)
Ipv6Interface:SetUp()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Icmpv6L4Protocol:Icmpv6L4Protocol()
construct tid=ns3::Icmpv6L4Protocol, params=1
try to construct "ns3::Icmpv6L4Protocol::DAD"
construct "ns3::Icmpv6L4Protocol::DAD" from initial value.
construct tid=ns3::Ipv6L4Protocol, params=1
try to construct "ns3::Ipv6L4Protocol::ProtocolNumber"
construct "ns3::Ipv6L4Protocol::ProtocolNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:SetNode(0x868d20, 0x862000)
Ipv6L3Protocol:Insert(0x868bd0, 0x868d20)
construct tid=ns3::Ipv6RawSocketFactory, params=0
construct tid=ns3::SocketFactory, params=0
construct tid=ns3::Object, params=0
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
Ipv6ListRouting:Ipv6ListRouting()
construct tid=ns3::Ipv6ListRouting, params=0
construct tid=ns3::Ipv6RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv6StaticRouting:Ipv6StaticRouting()
construct tid=ns3::Ipv6StaticRouting, params=0
construct tid=ns3::Ipv6RoutingProtocol, params=0
construct tid=ns3::Object, params=0
Ipv6ListRouting:AddRoutingProtocol(0x868620, ns3::Ipv6StaticRouting, 0)
Ipv6L3Protocol:SetRoutingProtocol(0x868bd0, 0x868620)
Ipv6ListRouting:SetIpv6(0x868620, 0x868bd0)
Ipv6StaticRouting:SetIpv6(0x868e50, 0x868bd0)
Ipv6L3Protocol:GetNInterfaces()
Ipv6L3Protocol:IsUp(0x868bd0, 0)
Ipv6L3Protocol:GetInterface(0x868bd0, 0)
Ipv6Interface:IsUp()
Ipv6L3Protocol:GetNAddresses(0x868bd0, 0)
Ipv6L3Protocol:GetInterface(0x868bd0, 0)
Ipv6Interface:GetNAddresses()
Ipv6L3Protocol:GetAddress(0x868bd0, 0, 0)
Ipv6L3Protocol:GetInterface(0x868bd0, 0)
Ipv6Interface:GetAddress(0x868860, 0)
Ipv6InterfaceAddress:GetAddress()
Ipv6L3Protocol:GetAddress(0x868bd0, 0, 0)
Ipv6L3Protocol:GetInterface(0x868bd0, 0)
Ipv6Interface:GetAddress(0x868860, 0)
Ipv6InterfaceAddress:GetPrefix()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:GetAddress(0x868bd0, 0, 0)
Ipv6L3Protocol:GetInterface(0x868bd0, 0)
Ipv6Interface:GetAddress(0x868860, 0)
Ipv6InterfaceAddress:GetPrefix()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:GetAddress(0x868bd0, 0, 0)
Ipv6L3Protocol:GetInterface(0x868bd0, 0)
Ipv6Interface:GetAddress(0x868860, 0)
Ipv6InterfaceAddress:GetAddress()
Ipv6StaticRouting:AddHostRouteTo(0x868e50, 0000:0000:0000:0000:0000:0000:0000:0001, 0, 0)
Ipv6StaticRouting:AddNetworkRouteTo(0x868e50, 0000:0000:0000:0000:0000:0000:0000:0001, ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff, 0)
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6L3Protocol:GetNAddresses(0x868bd0, 0)
Ipv6L3Protocol:GetInterface(0x868bd0, 0)
Ipv6Interface:GetNAddresses()
Ipv6L3Protocol:GetNInterfaces()
construct tid=ns3::Ipv6ExtensionDemux, params=1
try to construct "ns3::Ipv6ExtensionDemux::Extensions"
construct "ns3::Ipv6ExtensionDemux::Extensions" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:Ipv6ExtensionHopByHop()
construct tid=ns3::Ipv6ExtensionHopByHop, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x868fb0, 0x862000)
Ipv6Extension:Ipv6ExtensionDestination()
construct tid=ns3::Ipv6ExtensionDestination, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x869010, 0x862000)
Ipv6Extension:Ipv6ExtensionFragment()
construct tid=ns3::Ipv6ExtensionFragment, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x868ab0, 0x862000)
Ipv6Extension:Ipv6ExtensionRouting()
construct tid=ns3::Ipv6ExtensionRouting, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x869090, 0x862000)
construct tid=ns3::Ipv6ExtensionRoutingDemux, params=1
try to construct "ns3::Ipv6ExtensionRoutingDemux::Routing Extensions"
construct "ns3::Ipv6ExtensionRoutingDemux::Routing Extensions" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:Ipv6ExtensionRouting()
Ipv6Extension:Ipv6ExtensionLooseRouting()
construct tid=ns3::Ipv6ExtensionLooseRouting, params=0
construct tid=ns3::Ipv6ExtensionRouting, params=0
construct tid=ns3::Ipv6Extension, params=1
try to construct "ns3::Ipv6Extension::ExtensionNumber"
construct "ns3::Ipv6Extension::ExtensionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Extension:SetNode(0x8691d0, 0x862000)
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
construct tid=ns3::Ipv6OptionDemux, params=1
try to construct "ns3::Ipv6OptionDemux::Options"
construct "ns3::Ipv6OptionDemux::Options" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:Ipv6OptionPad1()
construct tid=ns3::Ipv6OptionPad1, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x868e00, 0x862000)
Ipv6Option:Ipv6OptionPadn()
construct tid=ns3::Ipv6OptionPadn, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x869250, 0x862000)
Ipv6Option:Ipv6OptionJumbogram()
construct tid=ns3::Ipv6OptionJumbogram, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x869280, 0x862000)
Ipv6Option:Ipv6OptionRouterAlert()
construct tid=ns3::Ipv6OptionRouterAlert, params=0
construct tid=ns3::Ipv6Option, params=1
try to construct "ns3::Ipv6Option::OptionNumber"
construct "ns3::Ipv6Option::OptionNumber" from initial value.
construct tid=ns3::Object, params=0
Ipv6Option:SetNode(0x869380, 0x862000)
Ipv6L3Protocol:NotifyNewAggregate()
Icmpv6L4Protocol:NotifyNewAggregate()
Ipv4AddressHelper:Ipv4AddressHelper()
Assign IP Addresses.
Ipv4AddressHelper:SetBase()
Ipv4AddressHelper:NumAddressBits()
NumAddressBits -> 8
m_network == a0101
m_mask == ffffff00
m_address == 1
Ipv4AddressHelper:Assign()
Ipv4L3Protocol:AddInterface(0x866f20, 0x7fffba6350b0)
Ipv4Interface:Ipv4Interface(0x869520)
construct tid=ns3::Ipv4Interface, params=1
try to construct "ns3::Ipv4Interface::ArpCache"
construct "ns3::Ipv4Interface::ArpCache" from initial value.
construct tid=ns3::Object, params=0
ArpL3Protocol:CreateCache(0x866ed0, 0x8624f0, 0x869520)
ArpCache:ArpCache(0x869570)
construct tid=ns3::ArpCache, params=5
try to construct "ns3::ArpCache::AliveTimeout"
construct "ns3::ArpCache::AliveTimeout" from initial value.
try to construct "ns3::ArpCache::DeadTimeout"
construct "ns3::ArpCache::DeadTimeout" from initial value.
try to construct "ns3::ArpCache::WaitReplyTimeout"
construct "ns3::ArpCache::WaitReplyTimeout" from initial value.
try to construct "ns3::ArpCache::MaxRetries"
construct "ns3::ArpCache::MaxRetries" from initial value.
try to construct "ns3::ArpCache::PendingQueueSize"
construct "ns3::ArpCache::PendingQueueSize" from initial value.
construct tid=ns3::Object, params=0
ArpCache:SetDevice(0x869570, 0x8624f0, 0x869520)
ArpCache:SetArpRequestCallback(0x869570)
Ipv4Interface:SetForwarding()
Ipv4L3Protocol:AddIpv4Interface(0x866f20, 0x869520)
Ipv4AddressGenerator:AddAllocated()
Ipv4AddressGenerator:Ipv4AddressGeneratorImpl()
Ipv4AddressGenerator:Reset()
Simulator:ScheduleDestroy(1)
Ipv4AddressGenerator:AddAllocated()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba635030)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba635050)
Ipv4L3Protocol:AddAddress(Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634f70)
0x866f20, 1, Ipv4InterfaceAddress:IsSecondary()
Ipv4InterfaceAddress:GetScope()
Ipv4InterfaceAddress:GetBroadcast()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
m_local=a.1.1.1; m_mask=ff.ff.ff.0; m_broadcast=a.1.1.ff; m_scope=2; m_secondary=0)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634f90)
Ipv4Interface:AddAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x869ef0)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634fb0)
Ipv4ListRouting:NotifyAddAddress(Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634d80)
0x866c90, 1, Ipv4InterfaceAddress:IsSecondary()
Ipv4InterfaceAddress:GetScope()
Ipv4InterfaceAddress:GetBroadcast()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
m_local=a.1.1.1; m_mask=ff.ff.ff.0; m_broadcast=a.1.1.ff; m_scope=2; m_secondary=0)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634da0)
0 [node 0] Ipv4StaticRouting:NotifyAddAddress(Ipv4InterfaceAddress:GetLocal()
0x867370, 1,  , a.1.1.1)
Ipv4Interface:IsUp()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634da0)
Ipv4GlobalRouting:NotifyAddAddress(Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634be0)
0x8675e0, 1, Ipv4InterfaceAddress:IsSecondary()
Ipv4InterfaceAddress:GetScope()
Ipv4InterfaceAddress:GetBroadcast()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
m_local=a.1.1.1; m_mask=ff.ff.ff.0; m_broadcast=a.1.1.ff; m_scope=2; m_secondary=0)
Ipv4L3Protocol:SetMetric(0x866f20, 1, 1)
Ipv4Interface:SetMetric(1)
Ipv4L3Protocol:SetUp(0x866f20, 1)
Ipv4Interface:SetUp()
Ipv4ListRouting:NotifyInterfaceUp(0x866c90, 1)
0 [node 0] Ipv4StaticRouting:NotifyInterfaceUp(0x867370, 1)
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634b60)
Ipv4InterfaceAddress:GetLocal()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634b80)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634ba0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634c00)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634be0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634bc0)
Ipv4InterfaceAddress:GetLocal()
0 [node 0] Ipv4StaticRouting:AddNetworkRouteTo(0x867370, a.1.1.0,  , ff.ff.ff.0,  , 1,  , 0)
Ipv4Interface:GetNAddresses()
Ipv4GlobalRouting:NotifyInterfaceUp(0x8675e0, 1)
Ipv4L3Protocol:AddInterface(0x868250, 0x7fffba6350b0)
Ipv4Interface:Ipv4Interface(0x86a050)
construct tid=ns3::Ipv4Interface, params=1
try to construct "ns3::Ipv4Interface::ArpCache"
construct "ns3::Ipv4Interface::ArpCache" from initial value.
construct tid=ns3::Object, params=0
ArpL3Protocol:CreateCache(0x868050, 0x864790, 0x86a050)
ArpCache:ArpCache(0x86a0c0)
construct tid=ns3::ArpCache, params=5
try to construct "ns3::ArpCache::AliveTimeout"
construct "ns3::ArpCache::AliveTimeout" from initial value.
try to construct "ns3::ArpCache::DeadTimeout"
construct "ns3::ArpCache::DeadTimeout" from initial value.
try to construct "ns3::ArpCache::WaitReplyTimeout"
construct "ns3::ArpCache::WaitReplyTimeout" from initial value.
try to construct "ns3::ArpCache::MaxRetries"
construct "ns3::ArpCache::MaxRetries" from initial value.
try to construct "ns3::ArpCache::PendingQueueSize"
construct "ns3::ArpCache::PendingQueueSize" from initial value.
construct tid=ns3::Object, params=0
ArpCache:SetDevice(0x86a0c0, 0x864790, 0x86a050)
ArpCache:SetArpRequestCallback(0x86a0c0)
Ipv4Interface:SetForwarding()
Ipv4L3Protocol:AddIpv4Interface(0x868250, 0x86a050)
Ipv4AddressGenerator:AddAllocated()
Ipv4AddressGenerator:AddAllocated()
examine entry: a.1.1.1 to a.1.1.1
New addrHigh = a.1.1.2
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba635030)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba635050)
Ipv4L3Protocol:AddAddress(Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634f70)
0x868250, 1, Ipv4InterfaceAddress:IsSecondary()
Ipv4InterfaceAddress:GetScope()
Ipv4InterfaceAddress:GetBroadcast()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
m_local=a.1.1.2; m_mask=ff.ff.ff.0; m_broadcast=a.1.1.ff; m_scope=2; m_secondary=0)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634f90)
Ipv4Interface:AddAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x86a840)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634fb0)
Ipv4ListRouting:NotifyAddAddress(Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634d80)
0x868010, 1, Ipv4InterfaceAddress:IsSecondary()
Ipv4InterfaceAddress:GetScope()
Ipv4InterfaceAddress:GetBroadcast()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
m_local=a.1.1.2; m_mask=ff.ff.ff.0; m_broadcast=a.1.1.ff; m_scope=2; m_secondary=0)
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634da0)
0 [node 1] Ipv4StaticRouting:NotifyAddAddress(Ipv4InterfaceAddress:GetLocal()
0x868780, 1,  , a.1.1.2)
Ipv4Interface:IsUp()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634da0)
Ipv4GlobalRouting:NotifyAddAddress(Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634be0)
0x8689f0, 1, Ipv4InterfaceAddress:IsSecondary()
Ipv4InterfaceAddress:GetScope()
Ipv4InterfaceAddress:GetBroadcast()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
m_local=a.1.1.2; m_mask=ff.ff.ff.0; m_broadcast=a.1.1.ff; m_scope=2; m_secondary=0)
Ipv4L3Protocol:SetMetric(0x868250, 1, 1)
Ipv4Interface:SetMetric(1)
Ipv4L3Protocol:SetUp(0x868250, 1)
Ipv4Interface:SetUp()
Ipv4ListRouting:NotifyInterfaceUp(0x868010, 1)
0 [node 1] Ipv4StaticRouting:NotifyInterfaceUp(0x868780, 1)
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634b60)
Ipv4InterfaceAddress:GetLocal()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634b80)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634ba0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634c00)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634be0)
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba634bc0)
Ipv4InterfaceAddress:GetLocal()
0 [node 1] Ipv4StaticRouting:AddNetworkRouteTo(0x868780, a.1.1.0,  , ff.ff.ff.0,  , 1,  , 0)
Ipv4Interface:GetNAddresses()
Ipv4GlobalRouting:NotifyInterfaceUp(0x8689f0, 1)
UdpL4Protocol:CreateSocket()
Socket:Socket()
UdpSocket:UdpSocket()
UdpSocketImpl:UdpSocketImpl()
construct tid=ns3::UdpSocketImpl, params=1
try to construct "ns3::UdpSocketImpl::IcmpCallback"
construct "ns3::UdpSocketImpl::IcmpCallback" from initial value.
construct tid=ns3::UdpSocket, params=6
try to construct "ns3::UdpSocket::RcvBufSize"
construct "ns3::UdpSocket::RcvBufSize" from initial value.
try to construct "ns3::UdpSocket::IpTtl"
construct "ns3::UdpSocket::IpTtl" from initial value.
try to construct "ns3::UdpSocket::IpMulticastTtl"
construct "ns3::UdpSocket::IpMulticastTtl" from initial value.
try to construct "ns3::UdpSocket::IpMulticastIf"
construct "ns3::UdpSocket::IpMulticastIf" from initial value.
try to construct "ns3::UdpSocket::IpMulticastLoop"
construct "ns3::UdpSocket::IpMulticastLoop" from initial value.
try to construct "ns3::UdpSocket::MtuDiscover"
construct "ns3::UdpSocket::MtuDiscover" from initial value.
construct tid=ns3::Object, params=0
UdpSocketImpl:SetNode()
UdpSocketImpl:SetUdp()
UdpSocketImpl:Bind(0x86a900, 02-06-00:00:00:00:50:00)
UdpL4Protocol:Allocate(0x867280, 80)
Ipv4EndPointDemux:Allocate(0x8671f0, 80)
Ipv4EndPointDemux:Allocate(0x8671f0, 0.0.0.0, 80)
Ipv4EndPointDemux:LookupLocal()
Now have >>1<< endpoints.
UdpSocketImpl:FinishBind()
Socket:SetRecvCallback()
UdpL4Protocol:CreateSocket()
Socket:Socket()
UdpSocket:UdpSocket()
UdpSocketImpl:UdpSocketImpl()
construct tid=ns3::UdpSocketImpl, params=1
try to construct "ns3::UdpSocketImpl::IcmpCallback"
construct "ns3::UdpSocketImpl::IcmpCallback" from initial value.
construct tid=ns3::UdpSocket, params=6
try to construct "ns3::UdpSocket::RcvBufSize"
construct "ns3::UdpSocket::RcvBufSize" from initial value.
try to construct "ns3::UdpSocket::IpTtl"
construct "ns3::UdpSocket::IpTtl" from initial value.
try to construct "ns3::UdpSocket::IpMulticastTtl"
construct "ns3::UdpSocket::IpMulticastTtl" from initial value.
try to construct "ns3::UdpSocket::IpMulticastIf"
construct "ns3::UdpSocket::IpMulticastIf" from initial value.
try to construct "ns3::UdpSocket::IpMulticastLoop"
construct "ns3::UdpSocket::IpMulticastLoop" from initial value.
try to construct "ns3::UdpSocket::MtuDiscover"
construct "ns3::UdpSocket::MtuDiscover" from initial value.
construct tid=ns3::Object, params=0
UdpSocketImpl:SetNode()
UdpSocketImpl:SetUdp()
UdpSocketImpl:Connect(0x86b060, 02-06-ff:ff:ff:ff:50:00)
Socket:NotifyConnectionSucceeded()
TraceHelper:PcapHelper()
TraceHelper:GetFilenameFromDevice(wifi-simple-adhoc, 0x8624f0, 1)
Names:NamesPriv()
Names:FindName(0x861e40)
Object does not exist in object map
Names:FindName(0x8624f0)
Object does not exist in object map
TraceHelper:CreateFile(wifi-simple-adhoc-0-0.pcap, 16, 127, 65535, 0)
construct tid=ns3::PcapFileWrapper, params=1
try to construct "ns3::PcapFileWrapper::CaptureSize"
construct "ns3::PcapFileWrapper::CaptureSize" from initial value.
construct tid=ns3::Object, params=0
TraceHelper:~PcapHelper()
TraceHelper:PcapHelper()
TraceHelper:GetFilenameFromDevice(wifi-simple-adhoc, 0x864790, 1)
Names:FindName(0x862000)
Object does not exist in object map
Names:FindName(0x864790)
Object does not exist in object map
TraceHelper:CreateFile(wifi-simple-adhoc-1-0.pcap, 16, 127, 65535, 0)
construct tid=ns3::PcapFileWrapper, params=1
try to construct "ns3::PcapFileWrapper::CaptureSize"
construct "ns3::PcapFileWrapper::CaptureSize" from initial value.
construct tid=ns3::Object, params=0
TraceHelper:~PcapHelper()
Testing 1 packets sent with receiver rss -80
UdpSocketImpl:GetNode()
DefaultSimulatorImpl:ScheduleWithContext(0x861be0, 1, 10000000000, 0, 0x86b240)
MapScheduler:Insert(0x861f40, 0x86b240, 10000000000, 13)
Simulator:Run()
MapScheduler:RemoveNext(0x861f40)
0x861f400x861bb005
handle 0
RegularWifiMac:DoStart(0x8626a0)
+0.0ns 0x862d90 start backoff=26 slots
+0.0ns 0x8639e0 start backoff=26 slots
+0.0ns 0x863e80 start backoff=30 slots
+0.0ns 0x863530 start backoff=15 slots
+0.0ns 0x863090 start backoff=5 slots
MapScheduler:RemoveNext(0x861f40)
0x861f400x861dc006
handle 0
RegularWifiMac:DoStart(0x864960)
+0.0ns 0x8650f0 start backoff=20 slots
+0.0ns 0x865d70 start backoff=22 slots
+0.0ns 0x866210 start backoff=1 slots
+0.0ns 0x8658c0 start backoff=2 slots
+0.0ns 0x865420 start backoff=4 slots
MapScheduler:RemoveNext(0x861f40)
0x861f400x86470008
handle 0
MapScheduler:RemoveNext(0x861f40)
0x861f400x866a7009
handle 0
MapScheduler:RemoveNext(0x861f40)
0x861f400x8670a0010
handle 0
MapScheduler:RemoveNext(0x861f40)
0x861f400x868470011
handle 0
MapScheduler:RemoveNext(0x861f40)
0x861f400x86b2401000000000013
handle 10000000000
Buffer:Buffer(0x7fffba634f18)
Buffer:Initialize(0x7fffba634f18, 0)
ByteTagList:ByteTagList(0x7fffba634f38)
Simulator:GetSystemId()
create size=10, max=0
create alloc size=10
PacketMetadata:DoAddHeader(0x7fffba634f50, 0, 5)
PacketMetadata:AddSmall(0x7fffba634f50, 65535, 65535, 0, 5, 0)
PacketMetadata:UpdateHead(0x7fffba634f50, 8)
Buffer:AddAtStart(0x7fffba634f18, 5)
add start=5, start=0, end=5, zero start=5, zero end=5, count=1, size=5, dirty start=0, dirty end=5
ByteTagList:ByteTagList(0x870798, 0x7fffba634f38)
ByteTagList:~ByteTagList(0x7fffba634f38)
ByteTagList:Deallocate(0x7fffba634f38, 0)
Buffer:~Buffer(0x7fffba634f18)
ByteTagList:ByteTagList(0x870808, 0x870798)
Socket:Send()
UdpSocketImpl:Send(0x86b060, 0x8707e0, 0)
UdpSocketImpl:DoSend(0x86b060, 0x8707e0)
UdpSocketImpl:Bind()
UdpL4Protocol:Allocate()
Ipv4EndPointDemux:Allocate()
Ipv4EndPointDemux:AllocateEphemeralPort()
Ipv4EndPointDemux:LookupPortLocal()
Now have >>1<< endpoints.
UdpSocketImpl:FinishBind()
UdpSocketImpl:DoSendTo(0x86b060, 0x8707e0, 255.255.255.255, 80)
UdpSocketImpl:GetTxAvailable()
Packet:RemovePacketTag(0x8707e0, ns3::SocketSetDontFragmentTag, 1)
PacketTagList:Remove(0x870818, ns3::SocketSetDontFragmentTag)
Packet:AddPacketTag(0x8707e0, ns3::SocketSetDontFragmentTag, 1)
PacketTagList:Add(0x870818, ns3::SocketSetDontFragmentTag)
PacketTagList:AllocData()
Limited broadcast start.
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348c0)
Ipv4InterfaceAddress:GetLocal()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6348c0)
Ipv4InterfaceAddress:GetLocal()
Ipv4InterfaceAddress:GetMask()
Sending one copy from 10.1.1.2 to 10.1.1.255 (mask is 255.255.255.0)
ByteTagList:ByteTagList(0x870878, 0x870808)
UdpL4Protocol:Send(0x868690, 0x870850, 10.1.1.2, 10.1.1.255, 49153, 80)
Packet:AddHeader(0x870850, ns3::UdpHeader, 8)
Buffer:AddAtStart(0x870858, 8)
add start=8, start=0, end=13, zero start=13, zero end=13, count=1, size=13, dirty start=0, dirty end=13
ByteTagList:AddAtStart(0x870878, 8, 8)
ByteTagList:ByteTagList(0x7fffba634350)
ByteTagList:BeginAll(0x870878)
ByteTagList:Begin(0x870878, 0, 2147483647)
ByteTagList:operator=(0x870878, 0x7fffba634350)
ByteTagList:Deallocate(0x870878, 0)
ByteTagList:~ByteTagList(0x7fffba634350)
ByteTagList:Deallocate(0x7fffba634350, 0)
PacketMetadata:ReadItems(0x870890, 0)
PacketMetadata:DoAddHeader(0x870890, 256, 8)
PacketMetadata:AddSmall(0x870890, 0, 65535, 256, 8, 1)
create size=17, max=10
create alloc size=17
PacketMetadata:UpdateHead(0x870890, 9)
PacketMetadata:ReadItems(0x870890, 8)
PacketMetadata:ReadItems(0x870890, 0)
Ipv4L3Protocol:Send(0x868250, 0x870850, 10.1.1.2, 10.1.1.255, 17, 0)
Packet:RemovePacketTag(0x870850, ns3::SocketIpTtlTag, 1)
PacketTagList:Remove(0x870888, ns3::SocketIpTtlTag)
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6340a0)
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
Testing address 127.0.0.1 with mask 255.0.0.0
Ipv4InterfaceAddress:GetMask()
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba6340a0)
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
Testing address 10.1.1.2 with mask 255.255.255.0
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
Ipv4L3Protocol::Send case 2:  subnet directed bcast to 10.1.1.2
Ipv4L3Protocol:BuildHeader(0x868250, 10.1.1.2, 10.1.1.255, 17, 13, 64, 1)
ByteTagList:ByteTagList(0x870908, 0x870878)
Packet:AddHeader(0x8708e0, ns3::Ipv4Header, 20)
Buffer:AddAtStart(0x8708e8, 20)
add start=20, start=0, end=33, zero start=33, zero end=33, count=1, size=33, dirty start=0, dirty end=33
ByteTagList:AddAtStart(0x870908, 20, 20)
ByteTagList:ByteTagList(0x7fffba633c70)
ByteTagList:BeginAll(0x870908)
ByteTagList:Begin(0x870908, 0, 2147483647)
ByteTagList:operator=(0x870908, 0x7fffba633c70)
ByteTagList:Deallocate(0x870908, 0)
ByteTagList:~ByteTagList(0x7fffba633c70)
ByteTagList:Deallocate(0x7fffba633c70, 0)
PacketMetadata:ReadItems(0x870920, 8)
PacketMetadata:ReadItems(0x870920, 0)
PacketMetadata:DoAddHeader(0x870920, 408, 20)
PacketMetadata:AddSmall(0x870920, 8, 65535, 408, 20, 2)
create size=26, max=17
create alloc size=26
PacketMetadata:UpdateHead(0x870920, 9)
PacketMetadata:ReadItems(0x870920, 17)
PacketMetadata:ReadItems(0x870920, 8)
PacketMetadata:ReadItems(0x870920, 0)
Ipv4Interface:Send(ByteTagList:ByteTagList(0x7fffba633b78, 0x870908)
10.1.1.255, Buffer:~Buffer(0x7fffba633850)
Buffer:~Buffer(0x7fffba633940)
PacketMetadata:ReadItems(0x7fffba633b90, 17)
Buffer:RemoveAtStart(0x7fffba6337f0, 0)
rem start=0, start=0, end=33, zero start=33, zero end=33, count=4, size=33, dirty start=0, dirty end=33
Buffer:RemoveAtEnd(0x7fffba6337f0, 13)
rem end=13, start=0, end=20, zero start=20, zero end=20, count=4, size=33, dirty start=0, dirty end=33
Buffer:~Buffer(0x7fffba6337f0)
ns3::Ipv4Header (tos 0x0 ttl 64 id 0 protocol 17 offset 0 flags [none] length: 33 10.1.1.2 > 10.1.1.255) PacketMetadata:ReadItems(0x7fffba633b90, 8)
Buffer:RemoveAtStart(0x7fffba6337f0, 20)
rem start=20, start=20, end=33, zero start=33, zero end=33, count=4, size=33, dirty start=0, dirty end=33
Buffer:RemoveAtEnd(0x7fffba6337f0, 5)
rem end=5, start=20, end=28, zero start=28, zero end=28, count=4, size=33, dirty start=0, dirty end=33
Buffer:~Buffer(0x7fffba6337f0)
ns3::UdpHeader (length: 13 49153 > 80) PacketMetadata:ReadItems(0x7fffba633b90, 0)
Payload (size=5)Buffer:~Buffer(0x7fffba6338c8)
ByteTagList:~ByteTagList(0x7fffba633b78)
ByteTagList:Deallocate(0x7fffba633b78, 0)
Buffer:~Buffer(0x7fffba633b58)
)
Ipv4Interface:IsUp()
Ipv4InterfaceAddress:GetLocal()
Needs ARP 10.1.1.255
Ipv4InterfaceAddress:GetMask()
Subnetwork Broadcast
Address Resolved.  Send.
Packet:AddHeader(0x8708e0, ns3::LlcSnapHeader, 8)
Buffer:AddAtStart(0x8708e8, 8)
add start=8, start=0, end=41, zero start=41, zero end=41, count=1, size=41, dirty start=0, dirty end=41
ByteTagList:AddAtStart(0x870908, 8, 8)
ByteTagList:ByteTagList(0x7fffba633740)
ByteTagList:BeginAll(0x870908)
ByteTagList:Begin(0x870908, 0, 2147483647)
ByteTagList:operator=(0x870908, 0x7fffba633740)
ByteTagList:Deallocate(0x870908, 0)
ByteTagList:~ByteTagList(0x7fffba633740)
ByteTagList:Deallocate(0x7fffba633740, 0)
PacketMetadata:ReadItems(0x870920, 17)
PacketMetadata:ReadItems(0x870920, 8)
PacketMetadata:ReadItems(0x870920, 0)
PacketMetadata:DoAddHeader(0x870920, 72, 8)
PacketMetadata:AddSmall(0x870920, 17, 65535, 72, 8, 3)
create size=34, max=26
create alloc size=34
recycle size=26, list=0
PacketMetadata:UpdateHead(0x870920, 8)
PacketMetadata:ReadItems(0x870920, 26)
PacketMetadata:ReadItems(0x870920, 17)
PacketMetadata:ReadItems(0x870920, 8)
PacketMetadata:ReadItems(0x870920, 0)
AdhocWifiMac:Enqueue(0x864960, 0x8708e0, ff:ff:ff:ff:ff:ff)
[mac=00:00:00:00:00:02] DcaTxop:Queue(0x864fe0, 0x8708e0, 0x7fffba6338f0)
[mac=00:00:00:00:00:02] DcaTxop:StartAccessIfNeeded(0x864fe0)
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 0 dec backoff slots=20
+10000000000.0ns 0x8650f0 update slots=20 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 1 dec backoff slots=4
+10000000000.0ns 0x865420 update slots=4 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 2 dec backoff slots=2
+10000000000.0ns 0x8658c0 update slots=2 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 3 dec backoff slots=22
+10000000000.0ns 0x865d70 update slots=22 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 4 dec backoff slots=1
+10000000000.0ns 0x866210 update slots=1 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 0 needs access. backoff expired. access granted. slots=0
[mac=00:00:00:00:00:02] DcaTxop:NotifyAccessGranted(0x864fe0)
[mac=00:00:00:00:00:02] dequeued size=41, to=ff:ff:ff:ff:ff:ff, seq=0
[mac=00:00:00:00:00:02] MacLow:StartTransmission(0x864bc0, 0x8708e0, 0x865060, [send rts=0, next size=0, dur=+0.0ns, ack=none], 0x8650d0)
ByteTagList:ByteTagList(0x870a58, 0x870908)
[mac=00:00:00:00:00:02] MacLow:CancelAllEvents(0x864bc0)
Simulator:IsExpired(0x864c10)
Simulator:IsExpired(0x864c28)
Simulator:IsExpired(0x864c40)
Simulator:IsExpired(0x864c58)
Simulator:IsExpired(0x864c70)
Simulator:IsExpired(0x864c88)
Simulator:IsExpired(0x864ca0)
Simulator:IsExpired(0x864cb8)
Simulator:IsExpired(0x864cd0)
Simulator:IsExpired(0x864ce8)
[mac=00:00:00:00:00:02] startTx size=69, to=ff:ff:ff:ff:ff:ff, listener=0x8650d0
[mac=00:00:00:00:00:02] MacLow:SendDataPacket(0x864bc0)
WifiPhy:GetPayloadDurationMicroSeconds(69, DsssRate1Mbps)
 size=69 mode=DsssRate1Mbps rate=1000000
Packet:AddHeader(0x870a30, ns3::WifiMacHeader, 24)
Buffer:AddAtStart(0x870a38, 24)
add start=24, start=0, end=65, zero start=65, zero end=65, count=1, size=65, dirty start=0, dirty end=65
ByteTagList:AddAtStart(0x870a58, 24, 24)
ByteTagList:ByteTagList(0x7fffba632720)
ByteTagList:BeginAll(0x870a58)
ByteTagList:Begin(0x870a58, 0, 2147483647)
ByteTagList:operator=(0x870a58, 0x7fffba632720)
ByteTagList:Deallocate(0x870a58, 0)
ByteTagList:~ByteTagList(0x7fffba632720)
ByteTagList:Deallocate(0x7fffba632720, 0)
PacketMetadata:ReadItems(0x870a70, 26)
PacketMetadata:ReadItems(0x870a70, 17)
PacketMetadata:ReadItems(0x870a70, 8)
PacketMetadata:ReadItems(0x870a70, 0)
PacketMetadata:DoAddHeader(0x870a70, 180, 24)
PacketMetadata:AddSmall(0x870a70, 26, 65535, 180, 24, 4)
create size=43, max=34
create alloc size=43
PacketMetadata:UpdateHead(0x870a70, 9)
PacketMetadata:ReadItems(0x870a70, 34)
PacketMetadata:ReadItems(0x870a70, 26)
PacketMetadata:ReadItems(0x870a70, 17)
PacketMetadata:ReadItems(0x870a70, 8)
PacketMetadata:ReadItems(0x870a70, 0)
Packet:AddTrailer(0x870a30, ns3::WifiMacTrailer, 4)
Buffer:AddAtEnd(0x870a38, 4)
add end=4, start=0, end=69, zero start=65, zero end=65, count=1, size=69, dirty start=0, dirty end=69
ByteTagList:AddAtEnd(0x870a58, 0, 65)
ByteTagList:IsDirtyAtEnd(0x870a58, 65)
ByteTagList:BeginAll(0x870a58)
ByteTagList:Begin(0x870a58, 0, 2147483647)
PacketMetadata:AddTrailer(0x870a70, 182, 4)
PacketMetadata:ReadItems(0x870a70, 34)
PacketMetadata:ReadItems(0x870a70, 26)
PacketMetadata:ReadItems(0x870a70, 17)
PacketMetadata:ReadItems(0x870a70, 8)
PacketMetadata:ReadItems(0x870a70, 0)
PacketMetadata:AddSmall(0x870a70, 65535, 0, 182, 4, 5)
create size=52, max=43
create alloc size=52
recycle size=43, list=0
PacketMetadata:UpdateTail(0x870a70, 9)
PacketMetadata:ReadItems(0x870a70, 34)
PacketMetadata:ReadItems(0x870a70, 26)
PacketMetadata:ReadItems(0x870a70, 17)
PacketMetadata:ReadItems(0x870a70, 8)
PacketMetadata:ReadItems(0x870a70, 0)
PacketMetadata:ReadItems(0x870a70, 43)
[mac=00:00:00:00:00:02] MacLow:ForwardDown(0x864bc0, 0x870a30, 0x864d20, DsssRate1Mbps)
[mac=00:00:00:00:00:02] send DATA, to=ff:ff:ff:ff:ff:ff, size=69, mode=DsssRate1Mbps, duration=+0.0ns, seq=0x0
YansWifiPhy:SendPacket(0x866590, 0x870a30, DsssRate1Mbps, 0, 0)
WifiPhy:GetPayloadDurationMicroSeconds(69, DsssRate1Mbps)
 size=69 mode=DsssRate1Mbps rate=1000000
ByteTagList:ByteTagList(0x870b78, 0x870a58)
RadiotapHeader:RadiotapHeader(0x7fffba632300)
RadiotapHeader:SetTsft(0x7fffba632300, 10000000)
0x7fffba632300 m_length=16 m_present=0x1
RadiotapHeader:SetFrameFlags(0x7fffba632300, )
0x7fffba632300 m_length=17 m_present=0x3
RadiotapHeader:SetRate(0x7fffba632300, )
0x7fffba632300 m_length=18 m_present=0x7
RadiotapHeader:SetChannelFrequencyAndFlags(0x7fffba632300, 2412, 160)
0x7fffba632300 m_length=22 m_present=0xf
RadiotapHeader:GetSerializedSize(0x7fffba632300)
Packet:AddHeader(RadiotapHeader:GetInstanceTypeId(0x7fffba632300)
0x870b50, ns3::RadiotapHeader, 22)
Buffer:AddAtStart(0x870b58, 22)
add start=22, start=0, end=91, zero start=87, zero end=87, count=1, size=91, dirty start=0, dirty end=91
ByteTagList:AddAtStart(0x870b78, 22, 22)
ByteTagList:ByteTagList(0x7fffba6320b0)
ByteTagList:BeginAll(0x870b78)
ByteTagList:Begin(0x870b78, 0, 2147483647)
ByteTagList:operator=(0x870b78, 0x7fffba6320b0)
ByteTagList:Deallocate(0x870b78, 0)
ByteTagList:~ByteTagList(0x7fffba6320b0)
ByteTagList:Deallocate(0x7fffba6320b0, 0)
RadiotapHeader:Serialize(0x7fffba632300)
PacketMetadata:ReadItems(0x870b90, 34)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
PacketMetadata:ReadItems(0x870b90, 43)
RadiotapHeader:GetInstanceTypeId(0x7fffba632300)
PacketMetadata:DoAddHeader(0x870b90, 84, 22)
PacketMetadata:AddSmall(0x870b90, 34, 65535, 84, 22, 6)
create size=60, max=52
create alloc size=60
PacketMetadata:UpdateHead(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 52)
PacketMetadata:ReadItems(0x870b90, 34)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
PacketMetadata:ReadItems(0x870b90, 43)
recycle size=60, list=0
ByteTagList:~ByteTagList(0x870b78)
ByteTagList:Deallocate(0x870b78, 0)
Buffer:~Buffer(0x870b58)
+10000000000.0ns 0x864ec0 tx start for +744000.0ns
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 0 dec backoff slots=0
+10000000000.0ns 0x8650f0 update slots=0 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 1 dec backoff slots=0
+10000000000.0ns 0x865420 update slots=0 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 2 dec backoff slots=0
+10000000000.0ns 0x8658c0 update slots=0 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 3 dec backoff slots=0
+10000000000.0ns 0x865d70 update slots=0 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000000.0ns 0x864ec0 dcf 4 dec backoff slots=0
+10000000000.0ns 0x866210 update slots=0 slots, backoff=0
propagation: txPower=17.0206dbm, rxPower=-80dbm, distance=5m, delay=+16.0ns
ByteTagList:ByteTagList(0x870b78, 0x870a58)
DefaultSimulatorImpl:ScheduleWithContext(0x861be0, 0, 16, 10000000000, 0x870cb0)
MapScheduler:Insert(0x861f40, 0x870cb0, 10000000016, 14)
ByteTagList:~ByteTagList(0x870a58)
ByteTagList:Deallocate(0x870a58, 0)
Buffer:~Buffer(0x870a38)
+10000000000.0ns 0x8650f0 start backoff=17 slots
[mac=00:00:00:00:00:02] DcaTxop:StartAccessIfNeeded(0x864fe0)
[mac=00:00:00:00:00:02] tx broadcast
Simulator:GetMaximumSimulationTime()
recycle size=34, list=1
ByteTagList:~ByteTagList(0x870908)
ByteTagList:Deallocate(0x870908, 0)
Buffer:~Buffer(0x8708e8)
recycle size=17, list=1
ByteTagList:~ByteTagList(0x870878)
ByteTagList:Deallocate(0x870878, 0)
Buffer:~Buffer(0x870858)
Socket:NotifyDataSent()
UdpSocketImpl:GetTxAvailable()
Socket:NotifySend()
Limited broadcast end.
ByteTagList:~ByteTagList(0x870808)
ByteTagList:Deallocate(0x870808, 0)
Buffer:~Buffer(0x8707e8)
MapScheduler:Insert(0x861f40, 0x8670d0, 11000000000, 15)
recycle size=10, list=1
ByteTagList:~ByteTagList(0x870798)
ByteTagList:Deallocate(0x870798, 0)
Buffer:~Buffer(0x870778)
MapScheduler:RemoveNext(0x861f40)
0x861f400x870cb01000000001614
handle 10000000016
YansWifiPhy:StartReceivePacket(0x864200, 0x870b50, -80, DsssRate1Mbps, 0)
WifiPhy:GetPayloadDurationMicroSeconds(69, DsssRate1Mbps)
 size=69 mode=DsssRate1Mbps rate=1000000
sync to signal (power=1e-11W)
+10000000016.0ns 0x862b60 rx start for=+744000.0ns
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000016.0ns 0x862b60 dcf 0 dec backoff slots=26
+10000000016.0ns 0x862d90 update slots=26 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000016.0ns 0x862b60 dcf 1 dec backoff slots=5
+10000000016.0ns 0x863090 update slots=5 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000016.0ns 0x862b60 dcf 2 dec backoff slots=15
+10000000016.0ns 0x863530 update slots=15 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000016.0ns 0x862b60 dcf 3 dec backoff slots=26
+10000000016.0ns 0x8639e0 update slots=26 slots, backoff=0
access grant start=+10000.0ns, rx access start=+10000.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
+10000000016.0ns 0x862b60 dcf 4 dec backoff slots=30
+10000000016.0ns 0x863e80 update slots=30 slots, backoff=0
Simulator:IsExpired(0x864310)
MapScheduler:Insert(0x861f40, 0x8684a0, 10000744016, 16)
MapScheduler:RemoveNext(0x861f40)
0x861f400x8684a01000074401616
handle 10000744016
YansWifiPhy:EndReceive(0x864200, 0x870b50, 0x861dc0)
mode=1000000, snr=22.6572, per=0, size=69
ByteTagList:ByteTagList(0x870798, 0x870b78)
RadiotapHeader:RadiotapHeader(0x7fffba634ab0)
RadiotapHeader:SetTsft(0x7fffba634ab0, 10000744)
0x7fffba634ab0 m_length=16 m_present=0x1
RadiotapHeader:SetFrameFlags(0x7fffba634ab0, )
0x7fffba634ab0 m_length=17 m_present=0x3
RadiotapHeader:SetRate(0x7fffba634ab0, )
0x7fffba634ab0 m_length=18 m_present=0x7
RadiotapHeader:SetChannelFrequencyAndFlags(0x7fffba634ab0, 2412, 160)
0x7fffba634ab0 m_length=22 m_present=0xf
RadiotapHeader:SetAntennaSignalPower(0x7fffba634ab0, -80)
0x7fffba634ab0 m_length=23 m_present=0x2f
RadiotapHeader:SetAntennaNoisePower(0x7fffba634ab0, -100.552)
0x7fffba634ab0 m_length=24 m_present=0x6f
RadiotapHeader:GetSerializedSize(0x7fffba634ab0)
Packet:AddHeader(RadiotapHeader:GetInstanceTypeId(0x7fffba634ab0)
0x870770, ns3::RadiotapHeader, 24)
Buffer:AddAtStart(0x870778, 24)
add start=24, start=0, end=93, zero start=89, zero end=89, count=1, size=93, dirty start=0, dirty end=93
ByteTagList:AddAtStart(0x870798, 24, 24)
ByteTagList:ByteTagList(0x7fffba634850)
ByteTagList:BeginAll(0x870798)
ByteTagList:Begin(0x870798, 0, 2147483647)
ByteTagList:operator=(0x870798, 0x7fffba634850)
ByteTagList:Deallocate(0x870798, 0)
ByteTagList:~ByteTagList(0x7fffba634850)
ByteTagList:Deallocate(0x7fffba634850, 0)
RadiotapHeader:Serialize(0x7fffba634ab0)
PacketMetadata:ReadItems(0x8707b0, 34)
PacketMetadata:ReadItems(0x8707b0, 26)
PacketMetadata:ReadItems(0x8707b0, 17)
PacketMetadata:ReadItems(0x8707b0, 8)
PacketMetadata:ReadItems(0x8707b0, 0)
PacketMetadata:ReadItems(0x8707b0, 43)
RadiotapHeader:GetInstanceTypeId(0x7fffba634ab0)
PacketMetadata:DoAddHeader(0x8707b0, 84, 24)
PacketMetadata:AddSmall(0x8707b0, 34, 65535, 84, 24, 7)
create size=60, max=60
create found size=60
PacketMetadata:UpdateHead(0x8707b0, 8)
PacketMetadata:ReadItems(0x8707b0, 52)
PacketMetadata:ReadItems(0x8707b0, 34)
PacketMetadata:ReadItems(0x8707b0, 26)
PacketMetadata:ReadItems(0x8707b0, 17)
PacketMetadata:ReadItems(0x8707b0, 8)
PacketMetadata:ReadItems(0x8707b0, 0)
PacketMetadata:ReadItems(0x8707b0, 43)
recycle size=60, list=0
ByteTagList:~ByteTagList(0x870798)
ByteTagList:Deallocate(0x870798, 0)
Buffer:~Buffer(0x870778)
+10000744016.0ns 0x862b60 rx end ok
[mac=00:00:00:00:00:01] MacLow:ReceiveOk(0x862890, 0x870b50, 22.6572, DsssRate1Mbps, 0)
Packet:RemoveHeader(0x870b50, ns3::WifiMacHeader, 24)
Buffer:RemoveAtStart(0x870b58, 24)
rem start=24, start=24, end=69, zero start=65, zero end=65, count=1, size=69, dirty start=0, dirty end=69
PacketMetadata:RemoveHeader(0x870b90, 180, 24)
PacketMetadata:ReadItems(0x870b90, 34)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
PacketMetadata:ReadItems(0x870b90, 43)
PacketMetadata:ReadItems(0x870b90, 34)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
PacketMetadata:ReadItems(0x870b90, 43)
[mac=00:00:00:00:00:01] duration/id=+0.0ns
+10000744016.0ns 0x862b60 nav start for=+0.0ns
access grant start=+10000754016.0ns, rx access start=+10000754016.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
access grant start=+10000754016.0ns, rx access start=+10000754016.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
access grant start=+10000754016.0ns, rx access start=+10000754016.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
access grant start=+10000754016.0ns, rx access start=+10000754016.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
access grant start=+10000754016.0ns, rx access start=+10000754016.0ns, busy access start=+10000.0ns, tx access start=+10000.0ns, nav access start=+10000.0ns
[mac=00:00:00:00:00:01] rx group from=00:00:00:00:00:02
Packet:RemoveTrailer(0x870b50, ns3::WifiMacTrailer, 4)
Buffer:RemoveAtEnd(0x870b58, 4)
rem end=4, start=24, end=65, zero start=65, zero end=65, count=1, size=69, dirty start=0, dirty end=69
PacketMetadata:RemoveTrailer(0x870b90, 182, 4)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
PacketMetadata:ReadItems(0x870b90, 43)
PacketMetadata:ReadItems(0x870b90, 43)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
MacRxMiddle:Receive(0x870b50, 0x7fffba634920)
MacRxMiddle:Lookup(0x7fffba634920)
MacRxMiddle:IsDuplicate(0x7fffba634920, 0x870750)
MacRxMiddle:HandleFragments(0x870b50, 0x7fffba634920, 0x870750)
forwarding data from=00:00:00:00:00:02, seq=0, frag=0
AdhocWifiMac:Receive(0x8626a0, 0x870b50, 0x7fffba634920)
RegularWifiMac:ForwardUp(0x8626a0, 0x870b50, 00:00:00:00:00:02)
Packet:RemoveHeader(0x870b50, ns3::LlcSnapHeader, 8)
Buffer:RemoveAtStart(0x870b58, 8)
rem start=8, start=32, end=65, zero start=65, zero end=65, count=1, size=69, dirty start=0, dirty end=69
PacketMetadata:RemoveHeader(0x870b90, 72, 8)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
PacketMetadata:ReadItems(0x870b90, 26)
PacketMetadata:ReadItems(0x870b90, 17)
PacketMetadata:ReadItems(0x870b90, 8)
PacketMetadata:ReadItems(0x870b90, 0)
Node:NonPromiscReceiveFromDevice(0x861e40)
Node 0 ReceiveFromDevice:  dev 0 (type=ns3::WifiNetDevice) Packet UID 0
Ipv4L3Protocol:Receive(0x866f20, 0x7fffba633610, 0x870b50, 2048, 03-06-00:00:00:00:00:02)
Packet from 03-06-00:00:00:00:00:02 received on node 0
ByteTagList:ByteTagList(0x870798, 0x870b78)
Ipv4Interface:IsUp()
Packet:RemoveHeader(0x870770, ns3::Ipv4Header, 20)
Buffer:RemoveAtStart(0x870778, 20)
rem start=20, start=52, end=65, zero start=65, zero end=65, count=2, size=69, dirty start=0, dirty end=69
PacketMetadata:RemoveHeader(0x8707b0, 408, 20)
PacketMetadata:ReadItems(0x8707b0, 17)
PacketMetadata:ReadItems(0x8707b0, 8)
PacketMetadata:ReadItems(0x8707b0, 0)
PacketMetadata:ReadItems(0x8707b0, 17)
PacketMetadata:ReadItems(0x8707b0, 8)
PacketMetadata:ReadItems(0x8707b0, 0)
Ipv4ListRouting:RouteInput(0x870770, tos 0x0 ttl 64 id 0 protocol 17 offset 0 flags [none] length: 33 10.1.1.2 > 10.1.1.255, 0x8624f0)
RouteInput logic for node: 0
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba632d40)
Ipv4InterfaceAddress:GetLocal()
Ipv4InterfaceAddress:GetBroadcast()
For me (interface broadcast address)
Address 10.1.1.255 is a match for local delivery
Ipv4L3Protocol:LocalDeliver(0x866f20, 0x870770, 0x7fffba633310)
ByteTagList:ByteTagList(0x870808, 0x870798)
ByteTagList:ByteTagList(0x870878, 0x870808)
UdpL4Protocol:Receive(0x867280, 0x8707e0, tos 0x0 ttl 64 id 0 protocol 17 offset 0 flags [none] length: 33 10.1.1.2 > 10.1.1.255)
Packet:RemoveHeader(0x8707e0, ns3::UdpHeader, 8)
Buffer:RemoveAtStart(0x8707e8, 8)
rem start=8, start=60, end=65, zero start=65, zero end=65, count=4, size=69, dirty start=0, dirty end=69
PacketMetadata:RemoveHeader(0x870820, 256, 8)
PacketMetadata:ReadItems(0x870820, 8)
PacketMetadata:ReadItems(0x870820, 0)
PacketMetadata:ReadItems(0x870820, 8)
PacketMetadata:ReadItems(0x870820, 0)
Looking up dst 10.1.1.255 port 80
Ipv4EndPointDemux:Lookup()
Ipv4EndPointDemux:Lookup(0x8671f0, 10.1.1.255, 80, 10.1.1.2, 49153, 0x869520)
Looking up endpoint for destination address 10.1.1.255
Looking at endpoint dport=80 daddr=0.0.0.0 sport=0 saddr=0.0.0.0
Ipv4Interface:GetNAddresses()
Ipv4Interface:GetAddress()
Ipv4InterfaceAddress:Ipv4InterfaceAddress(0x7fffba632560)
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
Ipv4InterfaceAddress:GetMask()
Ipv4InterfaceAddress:GetLocal()
Ipv4Interface:GetNAddresses()
dest addr 10.1.1.255 broadcast? 1
Found bcast, localaddr 0.0.0.0
ByteTagList:ByteTagList(0x870908, 0x870808)
MapScheduler:Insert(0x861f40, 0x870a30, 10000744016, 17)
ByteTagList:~ByteTagList(0x870878)
ByteTagList:Deallocate(0x870878, 0)
Buffer:~Buffer(0x870858)
ByteTagList:~ByteTagList(0x870808)
ByteTagList:Deallocate(0x870808, 0)
Buffer:~Buffer(0x8707e8)
ByteTagList:~ByteTagList(0x870798)
ByteTagList:Deallocate(0x870798, 0)
Buffer:~Buffer(0x870778)
MapScheduler:RemoveNext(0x861f40)
0x861f400x870a301000074401617
handle 10000744016
UdpSocketImpl:ForwardUp(0x86a900, 0x8708e0, tos 0x0 ttl 64 id 0 protocol 17 offset 0 flags [none] length: 33 10.1.1.2 > 10.1.1.255, 49153)
Packet:AddPacketTag(0x8708e0, ns3::SocketAddressTag, 8)
PacketTagList:Add(0x870918, ns3::SocketAddressTag)
PacketTagList:AllocData()
Socket:NotifyDataRecv()
Received one packet!
MapScheduler:RemoveNext(0x861f40)
0x861f400x8670d01100000000015
handle 11000000000
UdpSocketImpl:Close()
Simulator:Destroy()
handle destroy 0x861f00
NodeListPriv:Delete()
NodeListPriv:DoDispose()
WifiNetDevice:DoDispose()
RegularWifiMac:DoDispose(0x8626a0)
MacRxMiddle:~MacRxMiddle()
[mac=00:00:00:00:00:01] MacLow:DoDispose(0x862890)
Simulator:Cancel(0x8628e0)
Simulator:Cancel(0x8628f8)
Simulator:Cancel(0x862910)
Simulator:Cancel(0x862928)
Simulator:Cancel(0x862940)
Simulator:Cancel(0x862958)
Simulator:Cancel(0x862970)
Simulator:Cancel(0x862988)
Simulator:Cancel(0x8629a0)
Simulator:Cancel(0x8629b8)
[mac=00:00:00:00:00:01] DcaTxop:DoDispose(0x862c80)
DcaTxop:~DcaTxop(0x862c80)
[mac=00:00:00:00:00:01] EdcaTxopN:DoDispose(0x863890)
EdcaTxopN:~EdcaTxopN(0x863890)
[mac=00:00:00:00:00:01] EdcaTxopN:DoDispose(0x863d10)
EdcaTxopN:~EdcaTxopN(0x863d10)
[mac=00:00:00:00:00:01] EdcaTxopN:DoDispose(0x8633e0)
EdcaTxopN:~EdcaTxopN(0x8633e0)
[mac=00:00:00:00:00:01] EdcaTxopN:DoDispose(0x862f20)
[mac=00:00:00:00:00:01] MacLow:~MacLow(0x862890)
EdcaTxopN:~EdcaTxopN(0x862f20)
YansWifiPhy:DoDispose(0x864200)
AdhocWifiMac:~AdhocWifiMac(0x8626a0)
RegularWifiMac:~RegularWifiMac(0x8626a0)
Ipv4L3Protocol:DoDispose(0x866f20)
Ipv4Interface:DoDispose()
Ipv4Interface:~Ipv4Interface()
Ipv4ListRouting:DoDispose()
Ipv4ListRouting:~Ipv4ListRouting()
Ipv6L3Protocol:DoDispose()
Ipv6Interface:DoDispose()
Ipv6Interface:~Ipv6Interface()
NetDevice:~NetDevice()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6ListRouting:DoDispose()
Ipv6StaticRouting:DoDispose()
Ipv6StaticRouting:~Ipv6StaticRouting()
Ipv6ListRouting:~Ipv6ListRouting()
ArpL3Protocol:DoDispose(0x866ed0)
ArpCache:DoDispose(0x869570)
ArpCache:Flush(0x869570)
Simulator:IsExpired(0x8695b8)
Ipv4Interface:DoDispose()
Ipv4Interface:~Ipv4Interface()
Simulator:IsExpired(0x8695b8)
Simulator:Remove(0x8695b8)
Icmpv4L4Protocol:DoDispose(0x867170)
UdpL4Protocol:DoDispose()
Ipv4EndPointDemux:~Ipv4EndPointDemux()
UdpSocketImpl:Destroy()
11 [node 0] TcpL4Protocol:DoDispose()
Ipv4EndPointDemux:~Ipv4EndPointDemux()
GlobalRouter:DoDispose()
Ipv4GlobalRouting:DoDispose()
Ipv4GlobalRouting:~Ipv4GlobalRouting()
Icmpv6L4Protocol:DoDispose()
Ipv6Extension:~Ipv6ExtensionLooseRouting()
Ipv6Extension:~Ipv6ExtensionRouting()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:~Ipv6ExtensionHopByHop()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:~Ipv6ExtensionDestination()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:DoDispose()
Ipv6Extension:~Ipv6ExtensionFragment()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:~Ipv6ExtensionRouting()
Ipv6Extension:~Ipv6Extension()
Ipv6Option:~Ipv6OptionPad1()
Ipv6Option:~Ipv6Option()
Ipv6Option:~Ipv6OptionPadn()
Ipv6Option:~Ipv6Option()
Ipv6Option:~Ipv6OptionJumbogram()
Ipv6Option:~Ipv6Option()
Ipv6Option:~Ipv6OptionRouterAlert()
Ipv6Option:~Ipv6Option()
Ipv4L3Protocol:DoDispose(0x868250)
Ipv4Interface:DoDispose()
Ipv4Interface:~Ipv4Interface()
Ipv4ListRouting:DoDispose()
Ipv4ListRouting:~Ipv4ListRouting()
WifiNetDevice:DoDispose()
RegularWifiMac:DoDispose(0x864960)
MacRxMiddle:~MacRxMiddle()
[mac=00:00:00:00:00:02] MacLow:DoDispose(0x864bc0)
Simulator:Cancel(0x864c10)
Simulator:Cancel(0x864c28)
Simulator:Cancel(0x864c40)
Simulator:Cancel(0x864c58)
Simulator:Cancel(0x864c70)
Simulator:Cancel(0x864c88)
Simulator:Cancel(0x864ca0)
Simulator:Cancel(0x864cb8)
Simulator:Cancel(0x864cd0)
Simulator:Cancel(0x864ce8)
[mac=00:00:00:00:00:02] DcaTxop:DoDispose(0x864fe0)
DcaTxop:~DcaTxop(0x864fe0)
[mac=00:00:00:00:00:02] EdcaTxopN:DoDispose(0x865c20)
EdcaTxopN:~EdcaTxopN(0x865c20)
[mac=00:00:00:00:00:02] EdcaTxopN:DoDispose(0x8660a0)
EdcaTxopN:~EdcaTxopN(0x8660a0)
[mac=00:00:00:00:00:02] EdcaTxopN:DoDispose(0x865770)
EdcaTxopN:~EdcaTxopN(0x865770)
[mac=00:00:00:00:00:02] EdcaTxopN:DoDispose(0x8652b0)
[mac=00:00:00:00:00:02] MacLow:~MacLow(0x864bc0)
EdcaTxopN:~EdcaTxopN(0x8652b0)
YansWifiPhy:DoDispose(0x866590)
AdhocWifiMac:~AdhocWifiMac(0x864960)
RegularWifiMac:~RegularWifiMac(0x864960)
Ipv6L3Protocol:DoDispose()
Ipv6Interface:DoDispose()
Ipv6Interface:~Ipv6Interface()
NetDevice:~NetDevice()
Ipv6InterfaceAddress:~Ipv6InterfaceAddress()
Ipv6ListRouting:DoDispose()
Ipv6StaticRouting:DoDispose()
Ipv6StaticRouting:~Ipv6StaticRouting()
Ipv6ListRouting:~Ipv6ListRouting()
ArpL3Protocol:DoDispose(0x868050)
ArpCache:DoDispose(0x86a0c0)
ArpCache:Flush(0x86a0c0)
Simulator:IsExpired(0x86a108)
Ipv4Interface:DoDispose()
Ipv4Interface:~Ipv4Interface()
Simulator:IsExpired(0x86a108)
Simulator:Remove(0x86a108)
Icmpv4L4Protocol:DoDispose(0x868560)
UdpL4Protocol:DoDispose()
Ipv4EndPointDemux:~Ipv4EndPointDemux()
UdpSocketImpl:Destroy()
11 [node 1] TcpL4Protocol:DoDispose()
Ipv4EndPointDemux:~Ipv4EndPointDemux()
GlobalRouter:DoDispose()
Ipv4GlobalRouting:DoDispose()
Ipv4GlobalRouting:~Ipv4GlobalRouting()
Icmpv6L4Protocol:DoDispose()
Ipv6Extension:~Ipv6ExtensionLooseRouting()
Ipv6Extension:~Ipv6ExtensionRouting()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:~Ipv6ExtensionHopByHop()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:~Ipv6ExtensionDestination()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:DoDispose()
Ipv6Extension:~Ipv6ExtensionFragment()
Ipv6Extension:~Ipv6Extension()
Ipv6Extension:~Ipv6ExtensionRouting()
Ipv6Extension:~Ipv6Extension()
Ipv6Option:~Ipv6OptionPad1()
Ipv6Option:~Ipv6Option()
Ipv6Option:~Ipv6OptionPadn()
Ipv6Option:~Ipv6Option()
Ipv6Option:~Ipv6OptionJumbogram()
Ipv6Option:~Ipv6Option()
Ipv6Option:~Ipv6OptionRouterAlert()
Ipv6Option:~Ipv6Option()
handle destroy 0x861ee0
ChannelList:Delete()
ChannelList:DoDispose()
handle destroy 0x864570
Ipv4AddressGenerator:~Ipv4AddressGeneratorImpl()
UdpSocketImpl:~UdpSocketImpl()
UdpSocket:~UdpSocket()
Socket:~Socket()
UdpSocketImpl:~UdpSocketImpl()
PacketTagList:FreeData(0x861bb0)
ByteTagList:~ByteTagList(0x870908)
ByteTagList:Deallocate(0x870908, 0)
Buffer:~Buffer(0x8708e8)
UdpSocket:~UdpSocket()
Socket:~Socket()
WifiNetDevice:~WifiNetDevice()
ArpCache:~ArpCache(0x869570)
NetDevice:~NetDevice()
WifiNetDevice:~WifiNetDevice()
ArpCache:~ArpCache(0x86a0c0)
NetDevice:~NetDevice()
YansWifiChannel:~YansWifiChannel()
YansWifiPhy:~YansWifiPhy(0x864200)
recycle size=52, list=1
PacketTagList:FreeData(0x864700)
ByteTagList:~ByteTagList(0x870b78)
ByteTagList:Deallocate(0x870b78, 0)
Buffer:~Buffer(0x870b58)
WifiPhy:~WifiPhy(0x864200)
YansWifiPhy:~YansWifiPhy(0x866590)
WifiPhy:~WifiPhy(0x866590)
Channel:~Channel()
Ipv4L3Protocol:~Ipv4L3Protocol(0x866f20)
Ipv6L3Protocol:~Ipv6L3Protocol()
ArpL3Protocol:~ArpL3Protocol(0x866ed0)
UdpL4Protocol:~UdpL4Protocol()
TcpL4Protocol:~TcpL4Protocol()
GlobalRouter:~GlobalRouter()
GlobalRouter:ClearLSAs()
Clear list of LSAs
Icmpv6L4Protocol:~Icmpv6L4Protocol()
Ipv4L3Protocol:~Ipv4L3Protocol(0x868250)
Ipv6L3Protocol:~Ipv6L3Protocol()
ArpL3Protocol:~ArpL3Protocol(0x868050)
UdpL4Protocol:~UdpL4Protocol()
TcpL4Protocol:~TcpL4Protocol()
GlobalRouter:~GlobalRouter()
GlobalRouter:ClearLSAs()
Clear list of LSAs
Icmpv6L4Protocol:~Icmpv6L4Protocol()
Names:~NamesPriv()

Modules built:
bridge                    config-store              core                     
internet                  mobility                  mpi                      
network                   propagation               tos                      
wifi                     

Waf: Entering directory `/home/lauril/dev/symphony/ns-3.11/build'
[886/913] cxx: src/tos/model/tos-mac-low.cc -> build/debug/src/tos/model/tos-mac-low_1.o
../src/tos/model/tos-mac-low.cc: In member function ‘void ns3::TosMacLow::TransmitData(ns3::Ptr<const ns3::Packet>, const ns3::WifiMacHeader*)’:
../src/tos/model/tos-mac-low.cc:365:4: error: ‘WifiMacTrailer’ was not declared in this scope
../src/tos/model/tos-mac-low.cc:365:19: error: expected ‘;’ before ‘fcs’
../src/tos/model/tos-mac-low.cc:366:33: error: ‘fcs’ was not declared in this scope
Waf: Leaving directory `/home/lauril/dev/symphony/ns-3.11/build'
Build failed:  -> task failed (err #1): 
	{task: cxx tos-mac-low.cc -> tos-mac-low_1.o}
